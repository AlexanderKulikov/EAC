// Модуль написан с учетом того, что он может исполняться как в конфигурации БСХП
//  так и в ЕАОС (ЕАС)
// Все изменения требуется синхронизировать в обоих конфигурациях
//
#Область СлужебныйПрограммныйИнтерфейс

#Область ПроцедурыФункцииРегистрацииОбмена     

Процедура ЗарегистрироватьИзмененияСправочника(Объект) Экспорт 
	
	Если Не Объект.ДополнительныеСвойства.Свойство("ОтключитьМеханизмРегистрацииОбъектов") Тогда
		ВсеУзлы = ЕАС_ОбменСерверПовтИспКопируемый.УзлыПланаОбмена("ОбменЕАСБухгалтерия");
		Для Каждого Узел Из ВсеУзлы Цикл
	    	Если ЕАС_ОбменСерверПовтИспКопируемый.РегистрироватьИзменениеСправочников(Узел) Тогда
				Объект.ОбменДанными.Получатели.Добавить(Узел);
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;
КонецПроцедуры	

Процедура ЗарегистрироватьИзмененияДокумента(Объект) Экспорт 
	
	Если Не Объект.ДополнительныеСвойства.Свойство("ОтключитьМеханизмРегистрацииОбъектов") Тогда
    	Если ЕАС_ОбменСерверПовтИспКопируемый.РегистрироватьИзменениеДокументов() Тогда
			ВсеУзлы = ЕАС_ОбменСерверПовтИспКопируемый.УзлыПланаОбмена("ОбменЕАСБухгалтерия");
			Для Каждого Узел Из ВсеУзлы Цикл
				Объект.ОбменДанными.Получатели.Добавить(Узел);
			КонецЦикла;	
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры	

Процедура ЗарегистрироватьИзмененияНабораРегистраСведений(ИмяРегистра, НаборЗаписей) Экспорт 
	
	Если НаборЗаписей.ДополнительныеСвойства.Свойство("ОтключитьМеханизмРегистрацииОбъектов") Тогда
		Возврат;
	КонецЕсли;
	
	Если ВРег(ИмяРегистра) <> ВРег("ЕАС_ПрисоединенныеДанные") Тогда
		Возврат;
	КонецЕсли;
	
	ВсеУзлы = ЕАС_ОбменСерверПовтИспКопируемый.УзлыПланаОбмена("ОбменЕАСБухгалтерия");
	
	Для Каждого Узел Из ВсеУзлы Цикл  
		Если ТребуетсяРегистрацияИзменений(Узел, НаборЗаписей) Тогда
			ПланыОбмена.ЗарегистрироватьИзменения(Узел, НаборЗаписей);
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры

Функция ТребуетсяРегистрацияИзменений(УзелОбмена, ВыгружаемыйОбъект)
	Если ТипЗнч(ВыгружаемыйОбъект) = Тип("УдалениеОбъекта") Тогда
		МетаданныеОбъекта = ВыгружаемыйОбъект.Ссылка.Метаданные();
	Иначе	
		МетаданныеОбъекта = ВыгружаемыйОбъект.Метаданные();
	КонецЕсли;	
	ПолноеИмя = МетаданныеОбъекта.ПолноеИмя();
	Если Лев(ПолноеИмя, СтрДлина("Справочник")) = "Справочник" Тогда
		Возврат ЕАС_ОбменСерверПовтИспКопируемый.РегистрироватьИзменениеСправочников(УзелОбмена); 
	ИначеЕсли Лев(ПолноеИмя, СтрДлина("Документ")) = "Документ" Тогда
		Возврат ЕАС_ОбменСерверПовтИспКопируемый.РегистрироватьИзменениеДокументов(); 
	ИначеЕсли ПолноеИмя = "РегистрСведений.ЕАС_ПрисоединенныеДанные" Тогда
		Если ВыгружаемыйОбъект.Количество() > 0 Тогда
			Запись = ВыгружаемыйОбъект[0];
			Возврат ТребуетсяРегистрацияИзменений(УзелОбмена, Запись.ВладелецДанных);
		Иначе	
			Возврат Ложь;
		КонецЕсли;	
	Иначе
		Возврат Истина;
	КонецЕсли;	
КонецФункции

#КонецОбласти

#Область ПроцедурыФункцииОбменаПоXDTO

#Область Отправка

Функция СформироватьXMLСообщениеЕАС(УзелОбмена, ТекстОшибки, СтруктураПротокол) Экспорт
	
	ТекстПротокол = СтрШаблон(НСтр("ru = 'Начало выгрузки данных. Текущее время - %1'"),
									Формат(ТекущаяДатаСеанса(), "ДЛФ=DT"));   
	ПротоколНачальныйУровень = СтруктураПротокол.ТекущийУровень;
	ЕАС_ПротоколированиеКопируемый.СообщениеВПротокол(СтруктураПротокол, ТекстПротокол, ПротоколНачальныйУровень + 1);  								
	
	Попытка
		ТекстПротокол = НСтр("ru = 'Формирование заголовка сообщения обмена'");
		ЕАС_ПротоколированиеКопируемый.СообщениеВПротокол(СтруктураПротокол, ТекстПротокол);  								
		
		Если УзелОбмена.ЭтотУзел Тогда
			ТекстОшибки =  СтрШаблон(НСтр("ru='Указан главный узел в качестве узла отправителя (%1).'"), УзелОбмена);
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;	
		
		ТекущаяОбласть = ЕАС_ОбластиДанныхКопируемый.ОбластьДанныхДляОбъектов();
		Если ТекущаяОбласть <> УзелОбмена.ОбластьДанных Тогда
			ТекстОшибки =  СтрШаблон(НСтр("ru='Область узла обмена (%1) отличается от текущей (%2).'"),
										УзелОбмена.ОбластьДанных,
										ТекущаяОбласть);
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;	
		
		ГлавныйУзелОткуда = ЕАС_ОбменСерверПовтИспКопируемый.КодЭтогоУзла("ОбменЕАСБухгалтерия");
		ГлавныйУзелКуда   = УзелОбмена.КодКорреспондента;
		Если ГлавныйУзелКуда = ГлавныйУзелОткуда Тогда
			ТекстОшибки = НСтр("ru='Коды главных узлов текущая и корреспондента должны быть разные.'");
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;	                    
		
		ОбластьКуда   = УзелОбмена.ОбластьДанныхКорреспондента;
		
		ЕАС_ПространствоИмен = "http://www.status.ru/pfi/message";
		
		СообщениеТип    = ФабрикаXDTO.Тип(ЕАС_ПространствоИмен, "Message"); 
		СообщениеОбъект = ФабрикаXDTO.Создать(СообщениеТип);
		
		ИзмененияТип    = ФабрикаXDTO.Тип(ЕАС_ПространствоИмен, "Changes"); 
		ИзмененияОбъект = ФабрикаXDTO.Создать(ИзмененияТип);
		
		ДанныеПодсистемыТип = ФабрикаXDTO.Тип(ЕАС_ПространствоИмен, "ДанныеПодсистемы");
		УдалениеОбъектаТип  = ФабрикаXDTO.Тип(ЕАС_ПространствоИмен, "УдалениеОбъекта");
		
		ДопОбъекты = Новый Соответствие; // кеш для хранимых реквизитов объектов (организаций, Единиц измерения и т.д.)
		
		Если ТипЗнч(УзелОбмена) = Тип("ПланОбменаСсылка.ОбменЕАСБухгалтерия") Тогда
			УзелСсылка = УзелОбмена;
		Иначе	
			УзелСсылка = УзелОбмена.Ссылка;
		КонецЕсли;	
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("ПланОбмена.ОбменЕАСБухгалтерия");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", УзелСсылка);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		НачатьТранзакцию();
		Попытка
			Блокировка.Заблокировать();       
			УзелОбъект = УзелСсылка.ПолучитьОбъект();
			УзелОбъект.НомерОтправленного = УзелОбъект.НомерОтправленного + 1;
			УзелОбъект.Записать();
			
			ЗаписьXML = Новый ЗаписьXML;
			ЗаписьXML.УстановитьСтроку(); // запись в строку
			ЗаписьXML.ЗаписатьОбъявлениеXML();
			
			СообщениеОбъект.Date    = ТекущаяДатаСеанса();  
			СообщениеОбъект.User    = ИмяПользователя(); 
			СообщениеОбъект.Divider = ТекущаяОбласть;
			СообщениеОбъект.changes = ИзмененияОбъект;
			
			ИзмененияОбъект.MainNodeTo   = ГлавныйУзелКуда;
			ИзмененияОбъект.MainNodeFrom = ГлавныйУзелОткуда;
			ИзмененияОбъект.RegionFrom   = ТекущаяОбласть;
			ИзмененияОбъект.RegionTo     = УзелОбмена.ОбластьДанныхКорреспондента;
			ИзмененияОбъект.Node         = УзелОбмена.Код;
			ИзмененияОбъект.MessageNo    = УзелОбъект.НомерОтправленного;
			ИзмененияОбъект.ReceivedNo   = УзелОбъект.НомерПринятого;
			
			ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(УзелСсылка, 
					УзелОбъект.НомерОтправленного);
					
			ТекстПротокол = НСтр("ru = 'Формирование данных сообщения обмена'");
			ЕАС_ПротоколированиеКопируемый.СообщениеВПротокол(СтруктураПротокол, ТекстПротокол);  								
			
			СтруктураПротокол.ТекущийУровень = СтруктураПротокол.ТекущийУровень + 1;
			Пока ВыборкаИзменений.Следующий() Цикл
				
				ВыгружаемыйОбъект = ВыборкаИзменений.Получить();
				
				ТекстПротокол = НСтр("ru = 'Выгружаемый объект: %1'");
				ТекстПротокол = СтрШаблон(ТекстПротокол, ВыгружаемыйОбъект); 
				ЕАС_ПротоколированиеКопируемый.СообщениеВПротокол(СтруктураПротокол, ТекстПротокол);  								
				
				Если ТребуетсяРегистрацияИзменений(УзелСсылка, ВыгружаемыйОбъект) Тогда
					Если ТипЗнч(ВыгружаемыйОбъект) = Тип("УдалениеОбъекта") Тогда
						ДанныеУдаления = СформироватьУдалениеОбъекта(ВыгружаемыйОбъект, УдалениеОбъектаТип, ЕАС_ПространствоИмен);
						Если ДанныеУдаления <> Неопределено Тогда 
							ИзмененияОбъект.Removed.Добавить(ДанныеУдаления);
						КонецЕсли;	
					Иначе	
						ДанныеПодсистемыОбъект = СформироватьДанныеПодсистемы(ВыгружаемыйОбъект, ДанныеПодсистемыТип, ЕАС_ПространствоИмен, ДопОбъекты);
						Если ДанныеПодсистемыОбъект <> Неопределено Тогда
							ИзмененияОбъект.Data.Добавить(ДанныеПодсистемыОбъект);
						КонецЕсли;	
					КонецЕсли;	               
					
				КонецЕсли;	
				
			КонецЦикла;
			
			СтруктураПротокол.ТекущийУровень = СтруктураПротокол.ТекущийУровень - 1;
			
			ТекстПротокол = НСтр("ru = 'Проверка сформированных данных сообщения обмена'");
			ЕАС_ПротоколированиеКопируемый.СообщениеВПротокол(СтруктураПротокол, ТекстПротокол);  								
			
			СообщениеОбъект.Проверить();
			
			ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, СообщениеОбъект);
			ДанныеXML = ЗаписьXML.Закрыть(); // документ готов!
			
			Если Ложь Тогда
				ТекстПротокол = НСтр("ru = 'Плановая отмена формирования данных сообщения обмена'");
				ЕАС_ПротоколированиеКопируемый.СообщениеВПротокол(СтруктураПротокол, ТекстПротокол);  								
				ОтменитьТранзакцию();                 
			Иначе
				ТекстПротокол = СтрШаблон(НСтр("ru = 'Фиксирование результата формирования данных сообщения обмена. Номер отправленного сообщения - %1'"),
											Формат(УзелОбъект.НомерОтправленного, "ЧН=; ЧГ=0"));
				ЕАС_ПротоколированиеКопируемый.СообщениеВПротокол(СтруктураПротокол, ТекстПротокол);  								
				
				ЗафиксироватьТранзакцию();
			КонецЕсли;	
		Исключение
			ОтменитьТранзакцию();
			ТекстОшибки =  СтрШаблон(НСтр("ru='Ошибка формирования сообщения ""%1"")'"), ОписаниеОшибки());
			ВызватьИсключение ТекстОшибки;
		КонецПопытки;	
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		ТекстПротокол = СтрШаблон(НСтр("ru = 'Ошибка выгрузки данных. Ошибка -  %1'"), ТекстОшибки);
		ЕАС_ПротоколированиеКопируемый.СообщениеВПротокол(СтруктураПротокол, ТекстПротокол);
	КонецПопытки;	

	СтруктураПротокол.ТекущийУровень = ПротоколНачальныйУровень;
	Возврат ДанныеXML; 
КонецФункции

Функция СформироватьДанныеПодсистемы(ВыгружаемыйОбъект, ДанныеПодсистемыТип, ЕАС_ПространствоИмен, ДопОбъекты)
	
	ИмяОбъекта = ВыгружаемыйОбъект.Метаданные().Имя;
	
	Сериализатор          = Новый СериализаторXDTO(ФабрикаXDTO);
	ВыгружаемыйОбъектXDTO = Сериализатор.ЗаписатьXDTO(ВыгружаемыйОбъект);
	
	СвойствоЗначение = ДанныеПодсистемыТип.Свойства.Получить("Значение");
	
	СвойствоДанных   = СвойствоЗначение.Тип.Свойства.Получить(ИмяОбъекта);
	
	Если ТипЗнч(СвойствоДанных) = Тип("СвойствоXDTO") Тогда
	
		ДанныеОбъект = ФабрикаXDTO.Создать(СвойствоДанных.Тип);
		
		Для Каждого СвойствоОбъекта Из СвойствоДанных.Тип.Свойства Цикл
			Если СвойствоОбъекта.Имя = "Ссылка" Тогда
				ДанныеОбъект.Установить(СвойствоОбъекта, XMLСтрока(ВыгружаемыйОбъект.Ссылка));
			ИначеЕсли СвойствоОбъекта.Имя = "Объект" Тогда
				ДанныеОбъект.Установить(СвойствоОбъекта, ВыгружаемыйОбъектXDTO);
			Иначе	
				УстановитьПолеОбъекта(ДанныеОбъект, ВыгружаемыйОбъект, ЕАС_ПространствоИмен, ДопОбъекты, СвойствоОбъекта);
			КонецЕсли;	
		КонецЦикла;	
	
		ДанныеЗначениеОбъект = ФабрикаXDTO.Создать(СвойствоЗначение.Тип);
		ДанныеЗначениеОбъект.Установить(ИмяОбъекта, ДанныеОбъект);
	
		ДанныеПодсистемыОбъект = ФабрикаXDTO.Создать(ДанныеПодсистемыТип);
		ДанныеПодсистемыОбъект.Установить(СвойствоЗначение, ДанныеЗначениеОбъект);
	
	КонецЕсли;	
	
	Возврат ДанныеПодсистемыОбъект; 
КонецФункции

Функция СформироватьУдалениеОбъекта(ВыгружаемыйОбъект, УдалениеОбъектаТип, ЕАС_ПространствоИмен)
	
	ИмяОбъекта = ВыгружаемыйОбъект.Ссылка.Метаданные().Имя;
	
	СвойствоСсылка = УдалениеОбъектаТип.Свойства.Получить("Ссылка");   
	
	СвойствоДанных = СвойствоСсылка.Тип.Свойства.Получить(ИмяОбъекта);
	                                                                
	Если ТипЗнч(СвойствоДанных) = Тип("СвойствоXDTO") Тогда
		
		СсылкаXDTO = ФабрикаXDTO.Создать(СвойствоДанных.Тип, XMLСтрока(ВыгружаемыйОбъект.Ссылка));
		
		Если СсылкаXDTO <> Неопределено Тогда
			
			ДанныеУдаления = ФабрикаXDTO.Создать(СвойствоСсылка.Тип);
			ДанныеУдаления.Установить(СвойствоДанных, СсылкаXDTO);
					
			ДанныеУдаленияОбъект = ФабрикаXDTO.Создать(УдалениеОбъектаТип);
		
			ДанныеУдаленияОбъект.Установить(СвойствоСсылка, ДанныеУдаления);
			
		КонецЕсли;	
	
	КонецЕсли;	
	
	Возврат ДанныеУдаленияОбъект; 
КонецФункции

Процедура УстановитьПолеОбъекта(ДанныеОбъект, ВыгружаемыйОбъект, ЕАС_ПространствоИмен, ДопОбъекты, СвойствоОбъекта)
	
	ДопПолеТип    = ФабрикаXDTO.Тип(ЕАС_ПространствоИмен, СвойствоОбъекта.Имя);
	ДопПолеОбъект = ФабрикаXDTO.Создать(ДопПолеТип);
	
	Реквизит = ВыгружаемыйОбъект[СвойствоОбъекта.Имя];
	РеквизитыПоля = ДопОбъекты.Получить(Реквизит); // сначала смотрим в Кэш
	Если РеквизитыПоля = Неопределено Тогда
		РеквизитыПоля = Новый Структура;    
		Для Каждого СвойствоДопПоля Из ДопПолеТип.Свойства Цикл
			РеквизитыПоля.Вставить(СвойствоДопПоля.Имя);
		КонецЦикла;	
		ЗаполнитьЗначенияСвойств(РеквизитыПоля, Реквизит);
		ДопОбъекты.Вставить(Реквизит, РеквизитыПоля);
	КонецЕсли;	
	ЗаполнитьЗначенияСвойств(ДопПолеОбъект, РеквизитыПоля);
	ДанныеОбъект.Установить(СвойствоОбъекта, ДопПолеОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область Получение

Процедура ПрочитатьXMLСообщениеЕАС(ДанныеXML, ТекстОшибки, СтруктураПротокол, ДанныеСообщения = Неопределено) Экспорт
	Перем ОписаниеТиповПередачи, ОписаниеЛокальныхТипов, ТаблицаСсылок;
	Перем НачальныйУровень;
	
	ТекстПротокол = СтрШаблон(НСтр("ru = 'Начало загрузки данных. Текущее время - %1'"),
									Формат(ТекущаяДатаСеанса(), "ДЛФ=DT"));   
	ПротоколНачальныйУровень = СтруктураПротокол.ТекущийУровень;
	ЕАС_ПротоколированиеКопируемый.СообщениеВПротокол(СтруктураПротокол, ТекстПротокол, ПротоколНачальныйУровень + 1);  								
	
	Попытка 
		МенеджерыСсылок = Менеджеры();
		
		РазделениеВключено = ОбщегоНазначения.РазделениеВключено();
		ЕАС_ПространствоИмен         = "http://www.status.ru/pfi/message";
		ПространствоИменКонфигурации = "http://v8.1c.ru/8.1/data/enterprise/current-config";
		РегистрСоответствийТип       = ФабрикаXDTO.Тип(ЕАС_ПространствоИмен, "РегистрСведений.ЕАС_СоответствияОбъектовИнформационныхБаз");
		
		СформироватьПеременныеЗагрузки(ЕАС_ПространствоИмен, ПространствоИменКонфигурации, ОписаниеТиповПередачи, ОписаниеЛокальныхТипов, ТаблицаСсылок); 
		
		СообщениеОбъект = ПолучитьСообщениеОбъект(ЕАС_ПространствоИмен, ДанныеXML, ТекстОшибки);
		Если ТекстОшибки <> Неопределено Тогда
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		ТекстПротокол = НСтр("ru = 'Анализ заголовка сообщения обмена'");
		ЕАС_ПротоколированиеКопируемый.СообщениеВПротокол(СтруктураПротокол, ТекстПротокол);  								
		
		ИзмененияОбъект = СообщениеОбъект.Changes;
		
		Если ИзмененияОбъект.MainNodeTo <> ЕАС_ОбменСерверПовтИспКопируемый.КодЭтогоУзла("ОбменЕАСБухгалтерия") Тогда
			ТекстОшибки =  СтрШаблон(НСтр("ru = 'Отличается код этого главного узла от данных пакета ""%1"")'"), ИзмененияОбъект.MainNodeTo);
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;	
		
		ТекущаяОбласть = ЕАС_ОбластиДанныхКопируемый.ОбластьДанныхДляОбъектов();
		Если ТекущаяОбласть <> ИзмененияОбъект.RegionTo Тогда
			ТекстОшибки =  СтрШаблон(НСтр("ru = 'Отличается текущая область ""%1"" от данных пакета ""%2"")'"), ТекущаяОбласть, ИзмененияОбъект.RegionTo);
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;	
		
		УзелОбмена = ПланыОбмена.ОбменЕАСБухгалтерия.НайтиПоКоду(ИзмененияОбъект.Node);
		Если УзелОбмена.Пустая() Или УзелОбмена.ЭтотУзел Тогда
			ТекстОшибки =  СтрШаблон(НСтр("ru = 'Не найден узел получателя ""%1"")'"), ИзмененияОбъект.Node);
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;                  
		
		Если УзелОбмена.КодКорреспондента <> ИзмененияОбъект.MainNodeFrom Тогда
			ТекстОшибки =  СтрШаблон(НСтр("ru = 'Код корреспондента ""%1"" отличается данных пакета ""%2"")'"), УзелОбмена.КодКорреспондента , ИзмененияОбъект.MainNodeFrom);
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;                  
		
		ТекстПротокол = НСтр("ru = 'Анализ данных сообщения обмена'");
		ЕАС_ПротоколированиеКопируемый.СообщениеВПротокол(СтруктураПротокол, ТекстПротокол);  								
		
		ДанныеПодсистемыСписок = ИзмененияОбъект.Data;
		
		Для Каждого ДанныеПодсистемыОбъект Из ДанныеПодсистемыСписок Цикл
			Для Каждого СвойствоДанных Из ДанныеПодсистемыОбъект.Значение.Свойства() Цикл
				ЗагружаемыеДанныеXDTO = ДанныеПодсистемыОбъект.Значение.Получить(СвойствоДанных);
				Если ТипЗнч(ЗагружаемыеДанныеXDTO) = Тип("ОбъектXDTO") 
					И ЗагружаемыеДанныеXDTO.Свойства().Получить("Объект") <> Неопределено 
					И ЗагружаемыеДанныеXDTO.Тип() <>  РегистрСоответствийТип Тогда
					ПоискСсылокОбъекта(ЗагружаемыеДанныеXDTO.Объект, ОписаниеЛокальныхТипов, ОписаниеТиповПередачи, ТаблицаСсылок);
				КонецЕсли;	
			КонецЦикла;	
		КонецЦикла;	
		
		УдаленияСтруктуры = Новый Массив;
		УдалениеОбъектовСписок = ИзмененияОбъект.Removed;
		Для Каждого УдалениеОбъектовXDTO Из УдалениеОбъектовСписок Цикл
			Для Каждого СвойствоДанных Из УдалениеОбъектовXDTO.Ссылка.Свойства() Цикл
				УдалениеДанные = УдалениеОбъектовXDTO.Ссылка.Получить(СвойствоДанных);
				Если ТипЗнч(УдалениеДанные) = Тип("Строка")
					И СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(УдалениеДанные) Тогда
					УдалениеСсылка = Неопределено;	
					Если Лев(СвойствоДанных.Тип.Имя, СтрДлина("Справочник")) = "Справочник" Тогда
						ТипСтрокой = "СправочникСсылка." + СвойствоДанных.Имя;
						УдалениеСсылка = ЕАС_ОбщегоНазначенияВызовСервераКопируемый.СсылкаСправочникаПоУИД(СвойствоДанных.Имя, УдалениеДанные);
					ИначеЕсли Лев(СвойствоДанных.Тип.Имя, СтрДлина("Документ")) = "Документ" Тогда
						ТипСтрокой = "ДокументСсылка." + СвойствоДанных.Имя;
						УдалениеСсылка = ЕАС_ОбщегоНазначенияВызовСервераКопируемый.СсылкаДокументаПоУИД(СвойствоДанных.Имя, УдалениеДанные);
					КонецЕсли;	
					Если УдалениеСсылка <> Неопределено Тогда
						УдаляемаяСтруктура = Новый Структура("ТипСтрокой, СтрокаУИД", ТипСтрокой, УдалениеДанные);
						УдаленияСтруктуры.Добавить(УдаляемаяСтруктура);
						ОбновитьТаблицуСсылок(УдалениеСсылка, ОписаниеЛокальныхТипов, ОписаниеТиповПередачи, ТаблицаСсылок, Истина);
					КонецЕсли;	
				КонецЕсли;              
			КонецЦикла;	
		КонецЦикла;	
		
		
		ПроверяемыеСсылки = Новый Соответствие;  // группировка ссылок по типам объектов
		ФормированиеЗаменТаблицыСсылок(УзелОбмена, ТаблицаСсылок, ,ПроверяемыеСсылки);
		
		// проверка ссылок (нужны неиспользованные ссылки)
		Для Каждого КлючЗначение Из ПроверяемыеСсылки Цикл 
			
			СсылкиТипа = КлючЗначение.Значение;
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
				|	Таблица.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.ЕАС_ШаблоныОтчетов КАК Таблица
				|ГДЕ
				|	Таблица.Ссылка В(&Ссылки)";
			ИмяОбъекта = СтрРазделить(КлючЗначение.Ключ,".")[1];
			Если Лев(КлючЗначение.Ключ, СтрДлина("Справочник")) = "Справочник" Тогда
				ИмяТаблицы = "Справочник." + ИмяОбъекта;
			ИначеЕсли Лев(КлючЗначение.Ключ, СтрДлина("Документ")) = "Документ" Тогда	
				ИмяТаблицы = "Документ." + ИмяОбъекта;
			КонецЕсли;	
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Справочник.ЕАС_ШаблоныОтчетов", ИмяТаблицы);
			Запрос.УстановитьПараметр("Ссылки", СсылкиТипа);
			РезультатЗапроса = Запрос.Выполнить().Выбрать();
			Пока РезультатЗапроса.Следующий() Цикл
				НомерСсылки = СсылкиТипа.Найти(РезультатЗапроса.Ссылка);
				Если НомерСсылки <> Неопределено Тогда
					СсылкиТипа.Удалить(НомерСсылки);
				КонецЕсли;	
			КонецЦикла;	
		КонецЦикла;	
		
		СоответствияОбъектовИнформационныхБаз = Новый Массив;
		
		Для Каждого СтрокаСсылок Из ТаблицаСсылок Цикл
			Если СтрокаСсылок.Новая Тогда
				Если НЕ СтрокаСсылок.ЭтоУдаление Тогда
					ТипПриемника = СтрокаСсылок.ТипСтрокой;
					БитыеСсылкиТипа = ПроверяемыеСсылки.Получить(ТипПриемника);
					
					Если РазделениеВключено Тогда
						УИД_Тут = Новый УникальныйИдентификатор;
					Иначе	
						УИД_Тут = Новый УникальныйИдентификатор(СтрокаСсылок.УИД_Там);
					КонецЕсли;	
					
					ИмяОбъекта = СтрРазделить(ТипПриемника, ".") [1];
					СсылкаТут = Неопределено;
					Если Лев(ТипПриемника, СтрДлина("Справочник")) = "Справочник" Тогда
						СсылкаТут = Справочники[ИмяОбъекта].ПолучитьСсылку(УИД_Тут);
					ИначеЕсли Лев(ТипПриемника, СтрДлина("Документ")) = "Документ" Тогда
						СсылкаТут = Документы[ИмяОбъекта].ПолучитьСсылку(УИД_Тут);
					КонецЕсли;	
					СтрокаСсылок.Ссылка  = СсылкаТут;
					СтрокаСсылок.УИД_Тут = XMLСтрока(УИД_Тут);
					
					Если СсылкаТут <> Неопределено 
						И Не РазделениеВключено 
						И БитыеСсылкиТипа.Найти(СтрокаСсылок.Ссылка) = Неопределено Тогда
						СтрокаСсылок.Новая = Ложь;
					КонецЕсли;	
					
					СтруктураЗаписи = Новый Структура;
					СтруктураЗаписи.Вставить("УникальныйИдентификаторПриемника", СтрокаСсылок.УИД_Там);
					СтруктураЗаписи.Вставить("УникальныйИдентификаторИсточника", СтрокаСсылок.Ссылка);
					СтруктураЗаписи.Вставить("ТипПриемника",                     ТипПриемника);
					СтруктураЗаписи.Вставить("ТипИсточника",                     ТипПриемника);
					СтруктураЗаписи.Вставить("УзелИнформационнойБазы",           УзелОбмена);
					СтруктураЗаписи.Вставить("Загрузка",                         Ложь);
					СоответствияОбъектовИнформационныхБаз.Добавить(СтруктураЗаписи);
				КонецЕсли;	
			КонецЕсли;	                                         
		КонецЦикла;	
		
		ЗагружаемыеОбъекты = Новый Массив;
		ТаблицаСсылокДополнительная = ТаблицаСсылок.СкопироватьКолонки();  // для формирования ссылок в табличных документах шаблонов
		
		КэшДопПолей = Новый Соответствие;
		
		ТекстПротокол = НСтр("ru = 'Загрузка данных сообщения обмена'");
		ЕАС_ПротоколированиеКопируемый.СообщениеВПротокол(СтруктураПротокол, ТекстПротокол);  								
		
		НачатьТранзакцию();
		Попытка
			// замена ссылок
			СтруктураПротокол.ТекущийУровень = СтруктураПротокол.ТекущийУровень + 1;
			
			Для Каждого ДанныеПодсистемыОбъект Из ДанныеПодсистемыСписок Цикл
				Для Каждого СвойствоДанных Из ДанныеПодсистемыОбъект.Значение.Свойства() Цикл
					ЗагружаемыеДанныеXDTO = ДанныеПодсистемыОбъект.Значение.Получить(СвойствоДанных);
					Если ТипЗнч(ЗагружаемыеДанныеXDTO) = Тип("ОбъектXDTO") 
						И ЗагружаемыеДанныеXDTO.Свойства().Получить("Объект") <> Неопределено Тогда
						Если ЗагружаемыеДанныеXDTO.Тип() <>  РегистрСоответствийТип Тогда
							ЗаменаСсылокОбъекта(ЗагружаемыеДанныеXDTO.Объект, ОписаниеЛокальныхТипов, ОписаниеТиповПередачи, ТаблицаСсылок);
							
							Сериализатор = Новый СериализаторXDTO(ФабрикаXDTO);
							ЗагружаемыйОбъект = Сериализатор.ПрочитатьXDTO(ЗагружаемыеДанныеXDTO.Объект);
							
							ТекстПротокол = НСтр("ru = 'Загрузка объекта: %1'");
							ТекстПротокол = СтрШаблон(ТекстПротокол, ЗагружаемыйОбъект);
							ЕАС_ПротоколированиеКопируемый.СообщениеВПротокол(СтруктураПротокол, ТекстПротокол);  								
							
							Если ТребуетсяЗагрузкаВыгрузка(УзелОбмена, ЗагружаемыйОбъект) Тогда
								// дополнительная обработка шаблонов табличных документов
								Если ТипЗнч(ЗагружаемыйОбъект) = Тип("РегистрСведенийНаборЗаписей.ЕАС_ПрисоединенныеДанные") Тогда
									ПоискСсылокШаблона(ЗагружаемыйОбъект, ОписаниеЛокальныхТипов, ОписаниеТиповПередачи, ТаблицаСсылокДополнительная);
								КонецЕсли;
								
								Для Каждого СвойствоДанных Из ЗагружаемыеДанныеXDTO.Свойства() Цикл
									УстановитьПолеДанныхОбъекта(ЗагружаемыеДанныеXDTO, ЗагружаемыйОбъект, КэшДопПолей, СвойствоДанных);
								КонецЦикла;	
								
								ЗагружаемыеОбъекты.Добавить(ЗагружаемыйОбъект);
							КонецЕсли;
						Иначе
							ТекстПротокол = НСтр("ru = 'Загрузка регистра соответствия: %1'");
							ТекстПротокол = СтрШаблон(ТекстПротокол, ЗагружаемыеДанныеXDTO.Объект);
							ЕАС_ПротоколированиеКопируемый.СообщениеВПротокол(СтруктураПротокол, ТекстПротокол);  								
							
							СтруктураЗаписи = Новый Структура;
							Для Каждого Запись Из ЗагружаемыеДанныеXDTO.Объект.Record Цикл
								ТипПриемникаСтрока =  Запись.ТипПриемника;
								Менеджер = МенеджерыСсылок[ТипПриемникаСтрока];
								Если Менеджер <> Неопределено И СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(Запись.УникальныйИдентификаторПриемника) Тогда
									УникальныйИдентификаторИсточника = Новый УникальныйИдентификатор(Запись.УникальныйИдентификаторПриемника);
									СтруктураЗаписи.Вставить("УникальныйИдентификаторПриемника", Запись.УникальныйИдентификаторИсточникаСтрокой);
									СтруктураЗаписи.Вставить("УникальныйИдентификаторИсточника", Менеджер.ПолучитьСсылку(УникальныйИдентификаторИсточника));
									СтруктураЗаписи.Вставить("ТипПриемника",                     Запись.ТипИсточника);
									СтруктураЗаписи.Вставить("ТипИсточника",                     Запись.ТипПриемника);
									СтруктураЗаписи.Вставить("УзелИнформационнойБазы",           УзелОбмена);
									СтруктураЗаписи.Вставить("Загрузка",                         Истина);
									СоответствияОбъектовИнформационныхБаз.Добавить(СтруктураЗаписи);
								КонецЕсли;	
							КонецЦикла;
						КонецЕсли;	
					КонецЕсли;	
				КонецЦикла;	
			КонецЦикла;	               
			СтруктураПротокол.ТекущийУровень = СтруктураПротокол.ТекущийУровень - 1;
			
			ФормированиеЗаменТаблицыСсылок(УзелОбмена, ТаблицаСсылокДополнительная, ТаблицаСсылок);
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("ПланОбмена.ОбменЕАСБухгалтерия");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", УзелОбмена);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();       
			УзелОбъект = УзелОбмена.ПолучитьОбъект();
			УзелОбъект.НомерПринятого = ИзмененияОбъект.MessageNo;
			УзелОбъект.Записать();
			
			Если ИзмененияОбъект.ReceivedNo > УзелОбъект.НомерОтправленного Тогда
				ТекстОшибки = СтрШаблон(НСтр("ru='Номер полученного сообщения ""%1"" корреспондентом ""%2"" больше отправленного ""%3"" на узле ""%4"" (Конфигурация ""%5"")'"), 
				ИзмененияОбъект.ReceivedNo,
				УзелОбъект.КодКорреспондента,
				УзелОбъект.НомерОтправленного,
				УзелОбъект.Код,
				Метаданные.Имя);
				ВызватьИсключение ТекстОшибки;								
			КонецЕсли;	
			
			ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, ИзмененияОбъект.ReceivedNo);
			
			Для Каждого ЗагружаемыйОбъект Из ЗагружаемыеОбъекты Цикл
				Если ТипЗнч(ЗагружаемыйОбъект) = Тип("РегистрСведенийНаборЗаписей.ЕАС_ПрисоединенныеДанные") Тогда
					ЗаменаСсылокШаблона(ЗагружаемыйОбъект, ОписаниеЛокальныхТипов, ОписаниеТиповПередачи, ТаблицаСсылокДополнительная);
				КонецЕсли;
				
				ЗагружаемыйОбъект.ОбменДанными.Загрузка = Истина;
				ЗагружаемыйОбъект.ОбменДанными.Отправитель = УзелОбмена;
				ЗагружаемыйОбъект.Записать();
			КонецЦикла;
			
			Для Каждого УдаляемаяСтруктура Из УдаленияСтруктуры Цикл
				СтруктураПоиска = Новый Структура("УИД_ТАМ,ТипСтрокой,Новая", УдаляемаяСтруктура.СтрокаУИД, УдаляемаяСтруктура.ТипСтрокой, Ложь);
				СтрокиСсылок = ТаблицаСсылок.НайтиСтроки(СтруктураПоиска);
				Если СтрокиСсылок.Количество() > 0 Тогда
					СтрокаСсылок = СтрокиСсылок[0];
					УдалениеОбъекта = Новый УдалениеОбъекта(СтрокаСсылок.Ссылка);
					УдалениеОбъекта.ОбменДанными.Отправитель = УзелОбмена;
					УдалениеОбъекта.Записать();
				КонецЕсли;	
			КонецЦикла;	
			
			Для Каждого СтруктураЗаписи Из СоответствияОбъектовИнформационныхБаз Цикл
				РегистрыСведений.ЕАС_СоответствияОбъектовИнформационныхБаз.ДобавитьЗапись(СтруктураЗаписи, СтруктураЗаписи.Загрузка);
			КонецЦикла;	
			
			ДанныеСообщения = Новый Структура;
			ДанныеСообщения.Вставить("УзелОбмена", УзелОбмена); 
			
			Если Ложь Тогда 
				ТекстПротокол = НСтр("ru = 'Плановая отмена загрузки данных сообщения обмена'");
				ЕАС_ПротоколированиеКопируемый.СообщениеВПротокол(СтруктураПротокол, ТекстПротокол);  								
				ОтменитьТранзакцию();                    
			Иначе
				ТекстПротокол = СтрШаблон(НСтр("ru = 'Фиксирование загрузки данных сообщения обмена. Номер принятого сообщения - %1'"),
											Формат(УзелОбъект.НомерПринятого, "ЧН=; ЧГ=0"));
				ЕАС_ПротоколированиеКопируемый.СообщениеВПротокол(СтруктураПротокол, ТекстПротокол);  								
				ЗафиксироватьТранзакцию();           
			КонецЕсли;
			ТекстПротокол = НСтр("ru = 'Успешное окончание загрузки данных сообщения обмена'");
			ЕАС_ПротоколированиеКопируемый.СообщениеВПротокол(СтруктураПротокол, ТекстПротокол);  								
		Исключение	
			ОтменитьТранзакцию();  
			ТекстОшибки =  СтрШаблон(НСтр("ru='Ошибка фиксирования результата обмена - ""%1"")'") , ОписаниеОшибки());
			ВызватьИсключение ТекстОшибки;
		КонецПопытки;	
	Исключение	
		ТекстОшибки = ОписаниеОшибки();
		ТекстПротокол = СтрШаблон(НСтр("ru = 'Ошибка загрузки данных. Ошибка -  %1'"), ТекстОшибки);
		ЕАС_ПротоколированиеКопируемый.СообщениеВПротокол(СтруктураПротокол, ТекстПротокол);
	КонецПопытки;	
	СтруктураПротокол.ТекущийУровень = ПротоколНачальныйУровень;
	
КонецПроцедуры

Функция Менеджеры()
	МенеджерыСсылок = Новый Соответствие;
	Для Каждого МетаданныеСсылки Из Метаданные.Документы Цикл
		ИмяМетаданных = МетаданныеСсылки.Имя;
		Если Лев(ИмяМетаданных, 4) = "ЕАС_" Тогда
			МенеджерыСсылок.Вставить("ДокументСсылка." + ИмяМетаданных, Документы[ИмяМетаданных]);
		КонецЕсли;	
	КонецЦикла;
	
	Для Каждого МетаданныеСсылки Из Метаданные.Справочники Цикл
		ИмяМетаданных = МетаданныеСсылки.Имя;
		Если Лев(ИмяМетаданных, 4) = "ЕАС_" Тогда
			МенеджерыСсылок.Вставить("СправочникСсылка." + ИмяМетаданных, Справочники[ИмяМетаданных]);
		КонецЕсли;	
	КонецЦикла;
	Возврат МенеджерыСсылок;
КонецФункции

Процедура УстановитьПолеДанныхОбъекта(ЗагружаемыеДанныеXDTO, ОбъектДанных, КэшДопПолей, СвойствоДанных)

	ИмяПоля = СвойствоДанных.Имя;
	ДанныеПоля = ЗагружаемыеДанныеXDTO[ИмяПоля];
	
	Если ДанныеПоля = Неопределено Тогда
		Возврат;
	ИначеЕсли ИмяПоля = "Ссылка" Тогда
		Возврат;
	ИначеЕсли ИмяПоля = "Объект" Тогда
		Возврат;
	Иначе		
		КэшДанныхПоля = КэшДопПолей.Получить(ИмяПоля);
		Если КэшДанныхПоля = Неопределено Тогда
			КэшДанныхПоля = Новый Соответствие;
			КэшДопПолей.Вставить(ИмяПоля, КэшДанныхПоля);
		КонецЕсли;
		Если ИмяПоля = "ЕдиницаИзмерения" Тогда
			Ключ = ДанныеПоля.Код;
		ИначеЕсли ИмяПоля = "Организация" Тогда
			Ключ = ДанныеПоля.ИНН + "/" + ДанныеПоля.КПП + "/" + ДанныеПоля.Наименование;
		ИначеЕсли ИмяПоля = "Ответственный" Тогда
			Ключ = ДанныеПоля.Наименование;
		Иначе
			Возврат;
		КонецЕсли;	

		Результат = КэшДанныхПоля.Получить(Ключ);
		Если Результат = Неопределено Тогда
			Результат = ОпределитьЗначениеСправочника(ИмяПоля, ДанныеПоля);
			КэшДанныхПоля.Вставить(Ключ, Результат);
		КонецЕсли;
	КонецЕсли;
	ОбъектДанных[ИмяПоля] = Результат;
КонецПроцедуры	

Функция ОпределитьЗначениеСправочника(ИмяПоля, ДанныеПоля)

	Если ИмяПоля = "ЕдиницаИзмерения" Тогда
		Результат = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду(ДанныеПоля.Код);
	ИначеЕсли ИмяПоля = "Ответственный" Тогда
		Результат = Справочники.Пользователи.НайтиПоНаименованию(ДанныеПоля.Наименование, Истина);
	ИначеЕсли ИмяПоля = "Организация" Тогда    
		Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
		                      |	ВТ.Ссылка КАК Ссылка
		                      |ИЗ
		                      |	(ВЫБРАТЬ
		                      |		Организации.Ссылка КАК Ссылка,
		                      |		1 КАК Приоритет
		                      |	ИЗ
		                      |		Справочник.Организации КАК Организации
		                      |	ГДЕ
		                      |		Организации.ИНН = &ИНН
		                      |		И Организации.КПП = &КПП
		                      |		И &ИНН <> """"
		                      |		И &КПП <> """"
		                      |	
		                      |	ОБЪЕДИНИТЬ ВСЕ
		                      |	
		                      |	ВЫБРАТЬ
		                      |		Организации.Ссылка,
		                      |		2
		                      |	ИЗ
		                      |		Справочник.Организации КАК Организации
		                      |	ГДЕ
		                      |		Организации.ИНН = &ИНН
		                      |		И &ИНН <> """"
		                      |	
		                      |	ОБЪЕДИНИТЬ ВСЕ
		                      |	
		                      |	ВЫБРАТЬ
		                      |		Организации.Ссылка,
		                      |		3
		                      |	ИЗ
		                      |		Справочник.Организации КАК Организации
		                      |	ГДЕ
		                      |		Организации.Наименование = &Наименование
		                      |	
		                      |	ОБЪЕДИНИТЬ ВСЕ
		                      |	
		                      |	ВЫБРАТЬ
		                      |		ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка),
		                      |		4
		                      |	ИЗ
		                      |		Справочник.Организации КАК Организации) КАК ВТ
		                      |
		                      |УПОРЯДОЧИТЬ ПО
		                      |	ВТ.Приоритет");
	
		Запрос.УстановитьПараметр("Наименование", 	ДанныеПоля.Наименование);
		Запрос.УстановитьПараметр("ИНН", 			ДанныеПоля.ИНН);
		Запрос.УстановитьПараметр("КПП", 			ДанныеПоля.КПП);
		РезультатЗапроса = Запрос.Выполнить().Выбрать();
		Если РезультатЗапроса.Следующий() Тогда
			Результат = РезультатЗапроса.Ссылка;
		КонецЕсли;
	КонецЕсли;
	Возврат Результат;
КонецФункции	

Функция ТребуетсяЗагрузкаВыгрузка(УзелОбмена, ВыгружаемыйОбъект)
	МетаданныеОбъекта = ВыгружаемыйОбъект.Метаданные();
	ПолноеИмя = МетаданныеОбъекта.ПолноеИмя();
	Если Лев(ПолноеИмя, СтрДлина("Справочник")) = "Справочник" Тогда
		Возврат ЕАС_ОбменСерверПовтИспКопируемый.ТребуетсяЗагружатьСправочник(УзелОбмена); 
	ИначеЕсли Лев(ПолноеИмя, СтрДлина("Документ")) = "Документ" Тогда
		Возврат ЕАС_ОбменСерверПовтИспКопируемый.ТребуетсяЗагружатьДокумент(); 
	ИначеЕсли ПолноеИмя = "РегистрСведений.ЕАС_ПрисоединенныеДанные" Тогда
		Если ВыгружаемыйОбъект.Количество() > 0 Тогда
			Запись = ВыгружаемыйОбъект[0];
			Возврат ТребуетсяЗагрузкаВыгрузка(УзелОбмена, Запись.ВладелецДанных);
		Иначе	
			Возврат Ложь;
		КонецЕсли;	
	Иначе
		Возврат Истина;
	КонецЕсли;	
КонецФункции

Процедура ПоискСсылокШаблона(НаборЗаписей, ОписаниеЛокальныхТипов, ОписаниеТиповПередачи, ТаблицаСсылок)
	Для Каждого Запись Из НаборЗаписей Цикл
		ТабличныйДокумент = Запись.ХранилищеДанных.Получить();
		Если ТипЗнч(ТабличныйДокумент) = Тип("ТабличныйДокумент") Тогда
			
			НомерОбласти = 0;                    
			Области = ТабличныйДокумент.Области;            
			
			Пока НомерОбласти < Области.Количество() Цикл
				ОбластьЯчейка = Области[НомерОбласти];
				ОбластьИмя = ОбластьЯчейка.Имя;
				СсылкаПоляФормы = ЕАС_ОбработкаШаблоновКлиентСерверКопируемый.СсылкаЯчейкиШаблона(ОбластьИмя);
				Если СсылкаПоляФормы <> Неопределено Тогда
					ОбновитьТаблицуСсылок(СсылкаПоляФормы, ОписаниеЛокальныхТипов, ОписаниеТиповПередачи, ТаблицаСсылок);
				КонецЕсли;	
				
				НомерОбласти = НомерОбласти + 1;        
					
			КонецЦикла;	
					
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры

Процедура ЗаменаСсылокШаблона(НаборЗаписей, ОписаниеЛокальныхТипов, ОписаниеТиповПередачи, ТаблицаСсылок)
	Для Каждого Запись Из НаборЗаписей Цикл
		ТабличныйДокумент = Запись.ХранилищеДанных.Получить();
		Если ТипЗнч(ТабличныйДокумент) = Тип("ТабличныйДокумент") Тогда
			
			НомерОбласти = 0;                    
			Области = ТабличныйДокумент.Области;        
			
			Для Каждого СтрокаСсылок Из ТаблицаСсылок Цикл
				Ссылка_Там = ЕАС_ОбщегоНазначенияВызовСервераКопируемый.СсылкаСправочникаПоУИД("ЕАС_ПоляФормШаблонов", СтрокаСсылок.Уид_Там);
				Имя_Там    = ЕАС_ОбработкаШаблоновКлиентСерверКопируемый.ИмяЯчейкиПоСсылке(Ссылка_Там);
				ОбластьЯчейка = Области.Найти(Имя_Там);
				Если ОбластьЯчейка <> Неопределено Тогда
					Если Не СтрокаСсылок.Новая Тогда
						ОбластьЯчейка.Имя = ЕАС_ОбработкаШаблоновКлиентСерверКопируемый.ИмяЯчейкиПоСсылке(СтрокаСсылок.Ссылка);
					Иначе
						ОбластьЯчейка.Имя = Неопределено;
					КонецЕсли;	
				КонецЕсли;	
			КонецЦикла;	
			
		КонецЕсли;
		Запись.ХранилищеДанных = Новый ХранилищеЗначения(ТабличныйДокумент);
	КонецЦикла;
КонецПроцедуры
	
Функция ПолучитьСообщениеОбъект(ЕАС_ПространствоИмен, ДанныеXML, ТекстОшибки)
	
	ЧтениеXML = Новый ЧтениеXML;
	Попытка
		ЧтениеXML.УстановитьСтроку(ДанныеXML);
		ЧтениеXML.Прочитать(); // определение
	
		СообщениеТип    = ФабрикаXDTO.Тип(ЕАС_ПространствоИмен, "Message"); 
		СообщениеОбъект = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, СообщениеТип);
	Исключение
		ТекстОшибки = СтрШаблон(НСтр("ru='Ошибка разбора полученного сообщения ""%1"")'"), ОписаниеОшибки());
	КонецПопытки;	
	
	ЧтениеXML.Закрыть();

	Возврат СообщениеОбъект;
КонецФункции

Процедура ЗаменаСсылокОбъекта(ОбъектXDTO, ОписаниеЛокальныхТипов, ОписаниеТиповПередачи, ТаблицаСсылок)   
	Для Каждого Свойство Из ОбъектXDTO.Свойства() Цикл
		ЭлементXDTO = ОбъектXDTO[Свойство.Имя];
		ТипЭлемента = ТипЗнч(ЭлементXDTO);
		Если ТипЭлемента = Тип("СписокXDTO") Тогда
			Для Каждого ЭлементСпискаXDTO Из ЭлементXDTO Цикл
				ЗаменаСсылокОбъекта(ЭлементСпискаXDTO, ОписаниеЛокальныхТипов, ОписаниеТиповПередачи, ТаблицаСсылок);
			КонецЦикла;	
		ИначеЕсли ТипЭлемента = Тип("ОбъектXDTO") Тогда
			ЗаменаСсылокОбъекта(ЭлементXDTO, ОписаниеЛокальныхТипов, ОписаниеТиповПередачи, ТаблицаСсылок);
		Иначе
			ЗаменаСсылкиОбъекта(ОбъектXDTO, Свойство.Имя, ОписаниеЛокальныхТипов, ОписаниеТиповПередачи, ТаблицаСсылок); 
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры

Процедура ЗаменаСсылкиОбъекта(ОбъектЭлемента, ИмяЭлемента, ОписаниеЛокальныхТипов, ОписаниеТиповПередачи, ТаблицаСсылок)   
	Элемент = ОбъектЭлемента[ИмяЭлемента];
	ТипЭлемента = ТипЗнч(Элемент);
	ЛокальныйТип = ОписаниеЛокальныхТипов.Получить(ТипЭлемента);                
	Свойство = ОбъектЭлемента.Свойства().Получить(ИмяЭлемента);
	Если ЛокальныйТип <> Неопределено Тогда
		ЛокальныйТипПередачи = ОписаниеТиповПередачи.Получить(ЛокальныйТип);
		УИД_Там = XMLСтрока(Элемент);
		Если УИД_Там = "00000000-0000-0000-0000-000000000000" Тогда
			СтрокаСсылок = Новый Структура;
			СтрокаСсылок.Вставить("Ссылка", ЛокальныйТипПередачи.ПустаяСсылка);
		Иначе	
			Отбор = Новый Структура("УИД_Там,ТипСтрокой", УИД_Там, ЛокальныйТипПередачи.ТипСтрока);
			СтрокиСсылок = ТаблицаСсылок.НайтиСтроки(Отбор);
			Если СтрокиСсылок.Количество() = 1 Тогда
				СтрокаСсылок = СтрокиСсылок[0];
			Иначе
				Возврат;                            
			КонецЕсли;	
		КонецЕсли;
		ЗначениеXDTO = ФабрикаXDTO.Создать(ЛокальныйТипПередачи.ТипСсылкиXDTO, СтрокаСсылок.Ссылка);
		ОбъектЭлемента.Установить(Свойство, ЗначениеXDTO);
	КонецЕсли;	
КонецПроцедуры

Процедура ФормированиеЗаменТаблицыСсылок(УзелОбмена, ТаблицаСсылок, НезаписаннаяТаблицаСсылок = Неопределено, ПроверяемыеСсылки = Неопределено)
	                                                                                            
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫРАЗИТЬ(ТаблицаСсылок.УИД_Там КАК СТРОКА(36)) КАК УИД_Там,
	               |	ВЫРАЗИТЬ(ТаблицаСсылок.ТипСтрокой КАК СТРОКА(100)) КАК ТипСтрокой,
	               |	ВЫРАЗИТЬ(ТаблицаСсылок.ЭтоУдаление КАК Булево) КАК ЭтоУдаление
	               |ПОМЕСТИТЬ ТаблицаСсылок
	               |ИЗ
	               |	&ТаблицаСсылок КАК ТаблицаСсылок";
	Запрос.УстановитьПараметр("ТаблицаСсылок", ТаблицаСсылок);
	Запрос.Выполнить();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаСсылок.УИД_Там КАК УникальныйИдентификаторПриемника,
	               |	МАКСИМУМ(СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторИсточника) КАК УникальныйИдентификаторИсточника,
	               |	ТаблицаСсылок.ТипСтрокой КАК ТипПриемника,
	               |	ТаблицаСсылок.ТипСтрокой КАК ТипИсточника,
	               |	МИНИМУМ(ТаблицаСсылок.ЭтоУдаление) КАК ЭтоУдаление,
	               |	&Узел КАК УзелИнформационнойБазы
	               |ИЗ
	               |	ТаблицаСсылок КАК ТаблицаСсылок
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЕАС_СоответствияОбъектовИнформационныхБаз КАК СоответствияОбъектовИнформационныхБаз
	               |		ПО (ТаблицаСсылок.ТипСтрокой = (ВЫРАЗИТЬ(СоответствияОбъектовИнформационныхБаз.ТипПриемника КАК СТРОКА(100))))
	               |			И (ТаблицаСсылок.ТипСтрокой = (ВЫРАЗИТЬ(СоответствияОбъектовИнформационныхБаз.ТипИсточника КАК СТРОКА(100))))
	               |			И (ТаблицаСсылок.УИД_Там = (ВЫРАЗИТЬ(СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторПриемника КАК СТРОКА(36))))
	               |			И (&Узел = СоответствияОбъектовИнформационныхБаз.УзелИнформационнойБазы)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТаблицаСсылок.УИД_Там,
	               |	ТаблицаСсылок.ТипСтрокой";
	
	Запрос.УстановитьПараметр("Узел", 	       УзелОбмена);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();   
	УстановитьПривилегированныйРежим(Ложь);
	
	ПроверяемыеСсылки = Новый Соответствие;  
	ТаблицаСсылок.Очистить();
	
	Пока РезультатЗапроса.Следующий() Цикл
		СтрокаСсылок = ТаблицаСсылок.Добавить();
		СтрокаСсылок.УИД_Там = РезультатЗапроса.УникальныйИдентификаторПриемника;
		ТипПриемника = СокрП(РезультатЗапроса.ТипПриемника);
		СтрокаСсылок.ТипСтрокой = ТипПриемника;
		СтрокаСсылок.ЭтоУдаление = РезультатЗапроса.ЭтоУдаление;
		
		Если ТипЗнч(РезультатЗапроса.УникальныйИдентификаторИсточника) = Тип("Null") Тогда
			НайденоСредиНезаписанных = Ложь;
			Если НезаписаннаяТаблицаСсылок <> Неопределено Тогда
				Отбор = Новый Структура("УИД_Там, ТипСтрокой", СтрокаСсылок.УИД_Там, ТипПриемника);
				НезаписанныеСтроки = НезаписаннаяТаблицаСсылок.НайтиСтроки(Отбор);
				Если НезаписанныеСтроки.Количество() > 0 Тогда
					НезаписаннаяСтрока = НезаписанныеСтроки[0];
					СтрокаСсылок.УИД_Тут    = НезаписаннаяСтрока.УИД_Тут;
					СтрокаСсылок.Ссылка     = НезаписаннаяСтрока.Ссылка;
					НайденоСредиНезаписанных = Истина;
				КонецЕсли;	
			КонецЕсли;	
			Если Не НайденоСредиНезаписанных Тогда
				УИД_Тут = Новый УникальныйИдентификатор(РезультатЗапроса.УникальныйИдентификаторПриемника);
				ИмяОбъекта = СтрРазделить(ТипПриемника, ".") [1];
				СсылкаТут = Неопределено;
				Если Лев(ТипПриемника, СтрДлина("Справочник")) = "Справочник" Тогда
					СсылкаТут = Справочники[ИмяОбъекта].ПолучитьСсылку(УИД_Тут);
				ИначеЕсли Лев(СтрокаСсылок.ТипСтрокой, СтрДлина("Документ")) = "Документ" Тогда	
					СсылкаТут = Документы[ИмяОбъекта].ПолучитьСсылку(УИД_Тут);
				КонецЕсли;	
				
				СсылкиТипа = ПроверяемыеСсылки.Получить(ТипПриемника);
				Если СсылкиТипа = Неопределено Тогда
					СсылкиТипа = Новый Массив;
					ПроверяемыеСсылки.Вставить(ТипПриемника, СсылкиТипа);
				КонецЕсли;	
				СсылкиТипа.Добавить(СсылкаТут);
				СтрокаСсылок.Ссылка     = СсылкаТут;
				СтрокаСсылок.УИД_Тут    = РезультатЗапроса.УникальныйИдентификаторПриемника;
				СтрокаСсылок.Новая      = Истина;
			КонецЕсли;
		Иначе	
			СтрокаСсылок.УИД_Тут    = XMLСтрока(РезультатЗапроса.УникальныйИдентификаторИсточника);
			СтрокаСсылок.Ссылка     = РезультатЗапроса.УникальныйИдентификаторИсточника;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры	

Процедура ПоискСсылокОбъекта(ОбъектXDTO, ОписаниеЛокальныхТипов, ОписаниеТиповПередачи, ТаблицаСсылок)   
	Для Каждого Свойство Из ОбъектXDTO.Свойства() Цикл
		ЭлементXDTO = ОбъектXDTO[Свойство.Имя];
		ТипЭлемента = ТипЗнч(ЭлементXDTO);
		Если ТипЭлемента = Тип("СписокXDTO") Тогда
			Для Каждого ЭлементСпискаXDTO Из ЭлементXDTO Цикл
				ПоискСсылокОбъекта(ЭлементСпискаXDTO, ОписаниеЛокальныхТипов, ОписаниеТиповПередачи, ТаблицаСсылок);
			КонецЦикла;	
		ИначеЕсли ТипЭлемента = Тип("ОбъектXDTO") Тогда
			ПоискСсылокОбъекта(ЭлементXDTO, ОписаниеЛокальныхТипов, ОписаниеТиповПередачи, ТаблицаСсылок);
		Иначе
			ОбновитьТаблицуСсылок(ЭлементXDTO, ОписаниеЛокальныхТипов, ОписаниеТиповПередачи, ТаблицаСсылок);
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры

Процедура ОбновитьТаблицуСсылок(Элемент, ОписаниеЛокальныхТипов, ОписаниеТиповПередачи, ТаблицаСсылок, ЭтоУдаление = Ложь)
	ТипЭлемента = ТипЗнч(Элемент);		
	ЛокальныйТип = ОписаниеЛокальныхТипов.Получить(ТипЭлемента);                 
	Если ЛокальныйТип <> Неопределено Тогда
		
		ЛокальныйТипПередачи = ОписаниеТиповПередачи.Получить(ЛокальныйТип);
		УИД_Там = XMLСтрока(Элемент);
		Если УИД_Там = "00000000-0000-0000-0000-000000000000" Тогда
			Возврат;
		КонецЕсли;                                       
		
		Отбор = Новый Структура("УИД_Там,ТипСтрокой", УИД_Там, ЛокальныйТипПередачи.ТипСтрока);
		Если ТаблицаСсылок.НайтиСтроки(Отбор).Количество() = 0 Тогда
			СтрокаСсылок = ТаблицаСсылок.Добавить();
			СтрокаСсылок.УИД_Там     = УИД_Там;               
			СтрокаСсылок.УИД_Тут     = Неопределено;          
			СтрокаСсылок.ТипСтрокой  = ЛокальныйТипПередачи.ТипСтрока; 
			СтрокаСсылок.Ссылка      = Неопределено;
			СтрокаСсылок.ЭтоУдаление = ЭтоУдаление;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры                      

Процедура СформироватьПеременныеЗагрузки(ЕАС_ПространствоИмен, ПространствоИменКонфигурации, ОписаниеТиповПередачи, ОписаниеЛокальныхТипов, ТаблицаСсылок)
	
	ОписаниеТиповПередачи = Новый Соответствие;
	
	ДанныеПодсистемыТип = ФабрикаXDTO.Тип(ЕАС_ПространствоИмен, "ДанныеПодсистемы");
	
	СвойстваДанных = ДанныеПодсистемыТип.Свойства.Получить("Значение").Тип.Свойства;
	
	Для Каждого СвойствоДанных Из СвойстваДанных Цикл
		
		ИмяТипСвойства = СвойствоДанных.Тип.Имя;
		МассивСтрок = СтрРазделить(ИмяТипСвойства, ".");
		
		СтруктураТипа = Новый Структура;   
		ИмяМенеджера   = МассивСтрок[0];
		ИмяМетаданных = МассивСтрок[1];
		ЭтоСсылка = Истина;
		СтруктураТипа.Вставить("Метаданные", ИмяМенеджера);
		Если ИмяМенеджера = "Справочник" Тогда
			СтруктураТипа.Вставить("ПустаяСсылка",   Справочники[ИмяМетаданных].ПустаяСсылка());
		ИначеЕсли ИмяМенеджера = "Документ" Тогда
			СтруктураТипа.Вставить("ПустаяСсылка",   Документы[ИмяМетаданных].ПустаяСсылка());
		Иначе	
			СтруктураТипа.Вставить("ПустаяСсылка",   Неопределено);
			ЭтоСсылка = Ложь;
		КонецЕсли;	
		Если ЭтоСсылка Тогда
			СтруктураТипа.Вставить("ТипСтрока",      СтруктураТипа.Метаданные + "Ссылка." + ИмяМетаданных);
			СтруктураТипа.Вставить("ТипСсылки",      Тип(СтруктураТипа.ТипСтрока));
			СтруктураТипа.Вставить("ТипСсылкиXDTO",  ФабрикаXDTO.Тип(ПространствоИменКонфигурации, XMLТип(СтруктураТипа.ТипСсылки).ИмяТипа)); 
			СтруктураТипа.Вставить("ТипОбъекта",     Тип(СтруктураТипа.Метаданные + "Объект." + ИмяМетаданных));
		Иначе	
			СтруктураТипа.Вставить("ТипСтрока",      Неопределено);
			СтруктураТипа.Вставить("ТипСсылки",      Неопределено);
			СтруктураТипа.Вставить("ТипСсылкиXDTO",  Неопределено); 
			СтруктураТипа.Вставить("ТипОбъекта",     Тип(СтруктураТипа.Метаданные + "НаборЗаписей." + СвойствоДанных.Имя));
		КонецЕсли;	
		СтруктураТипа.Вставить("ТипОбъектаXDTO", ФабрикаXDTO.Тип(ПространствоИменКонфигурации, XMLТип(СтруктураТипа.ТипОбъекта).ИмяТипа)); 
		ОписаниеТиповПередачи.Вставить(ИмяМетаданных,  СтруктураТипа);
	КонецЦикла;	
	
	ТаблицаСсылок = Новый ТаблицаЗначений;              
	ТаблицаСсылок.Колонки.Добавить("УИД_Там",        Новый ОписаниеТипов("Строка",,, Новый КвалификаторыСтроки(36)));
	ТаблицаСсылок.Колонки.Добавить("УИД_Тут",        Новый ОписаниеТипов("Строка",,, Новый КвалификаторыСтроки(36)));
	ТаблицаСсылок.Колонки.Добавить("ТипСтрокой",     Новый ОписаниеТипов("Строка",,, Новый КвалификаторыСтроки(100)));
	ТаблицаСсылок.Колонки.Добавить("Новая",          Новый ОписаниеТипов("Булево"));
	ТаблицаСсылок.Колонки.Добавить("ЭтоУдаление",	 Новый ОписаниеТипов("Булево"));
	МассивТиповСсылок = Новый Массив;
	ОписаниеЛокальныхТипов = Новый Соответствие;
	Для Каждого КлючЗначение Из ОписаниеТиповПередачи Цикл
		Если КлючЗначение.Значение.ТипСсылки <> Неопределено Тогда     
			МассивТиповСсылок.Добавить(КлючЗначение.Значение.ТипСсылки);
			ОписаниеЛокальныхТипов.Вставить(КлючЗначение.Значение.ТипСсылки, КлючЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;	
	ТаблицаСсылок.Колонки.Добавить("Ссылка", Новый ОписаниеТипов(МассивТиповСсылок));
	
КонецПроцедуры

#КонецОбласти
	
#КонецОбласти

#КонецОбласти

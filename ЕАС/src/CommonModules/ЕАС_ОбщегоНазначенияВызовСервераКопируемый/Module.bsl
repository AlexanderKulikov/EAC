#Область ПрограммныйИнтерфейс

// Вызывает соответствующую функцию общего назначения (БСП)
// Проверяет физическое наличие записи в информационной базе данных о переданном значении ссылки.
//
// Параметры:
//  ПроверяемаяСсылка - ЛюбаяСсылка - значение любой ссылки информационной базы данных.
// 
// Возвращаемое значение:
//  Булево - Истина, если существует.
//
Функция СсылкаСуществует(ПроверяемаяСсылка) Экспорт

	Возврат ОбщегоНазначения.СсылкаСуществует(ПроверяемаяСсылка);

КонецФункции

// Ищет элемент справочника по коду Вызывает соответствующую серверную функцию
//
// Параметры:
// См. Описание в функции платформы НайтиПоКоду
// 
// Возвращаемое значение:
//   СправочникСсылка - результат
//
Функция НайтиЭлементСправочникаПоКоду(ИмяСправочника, Код, ПоискПоПолномуКоду = Ложь, Родитель = Неопределено, Владелец = Неопределено) Экспорт
	
	Возврат Справочники[ИмяСправочника].НайтиПоКоду(Код, ПоискПоПолномуКоду, Родитель, Владелец);
	
КонецФункции

// Вызывает соответствующую функцию общего назначения (БСП)
//
// Параметры:
// См. Описание в функции ОбщегоНазначения.ЗначениеРеквизитаОбъекта
//
// Возвращаемое значение:
//  Произвольный - зависит от типа значения прочитанного реквизита.
//               - если в параметр Ссылка передана пустая ссылка, то возвращается Неопределено;
//               - если в параметр Ссылка передана ссылка несуществующего объекта (битая ссылка), 
//                 то возвращается Неопределено.
//
Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита, ВыбратьРазрешенные = Ложь) Экспорт
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита, ВыбратьРазрешенные);
	Иначе	
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Вызывает соответствующую функцию общего назначения (БСП)
//
// Параметры:
// См. Описание в функции ОбщегоНазначения.ЗначенияРеквизитовОбъекта
//
// Возвращаемое значение:
//  Структура - содержит имена (ключи) и значения затребованных реквизитов.
//            - если в параметр Реквизиты передана пустая строка, то возвращается пустая структура.
//            - если в параметр Ссылка передана пустая ссылка, то возвращается структура, 
//              соответствующая именам реквизитов со значениями Неопределено.
//            - если в параметр Ссылка передана ссылка несуществующего объекта (битая ссылка), 
//              то все реквизиты вернутся со значением Неопределено.
//
//
Функция ЗначенияРеквизитовОбъекта(Ссылка, Реквизиты, ВыбратьРазрешенные = Ложь) Экспорт
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, Реквизиты, ВыбратьРазрешенные);
	
КонецФункции

// Формирует ссылку справочника по полученному УИД 
//
//    ИмяСправочника - Строка - Имя документа как оно указано в метаданных, например "ЕАС_ШаблоныОтчетов",
//    УИД - УникальныйИдентификатор, Строка - Уникальный идентификатор, из которого будет формироваться ссылка.
//
// Возвращаемое значение:
//   СправочникСсылка - результат
//
Функция СсылкаСправочникаПоУИД(ИмяСправочника, УИД) Экспорт
	Если ТипЗнч(УИД) = Тип("УникальныйИдентификатор") Тогда
		Возврат Справочники[ИмяСправочника].ПолучитьСсылку(УИД);
	Иначе
		Возврат Справочники[ИмяСправочника].ПолучитьСсылку(Новый УникальныйИдентификатор(Строка(УИД)));
	КонецЕсли;
КонецФункции

// Формирует ссылку документа по полученному УИД 
//
// Параметры:
//    ИмяДокумента - Строка - Имя документа как оно указано в метаданных, например "ЕАС_ОтчетыИнтеграции",
//    УИД - УникальныйИдентификатор, Строка - Уникальный идентификатор, из которого будет формироваться ссылка.
//
// Возвращаемое значение:
//   ДокументСсылка - результат
//
Функция СсылкаДокументаПоУИД(ИмяДокумента, УИД) Экспорт
	Если ТипЗнч(УИД) = Тип("УникальныйИдентификатор") Тогда
		Возврат Документы[ИмяДокумента].ПолучитьСсылку(УИД);
	Иначе
		Возврат Документы[ИмяДокумента].ПолучитьСсылку(Новый УникальныйИдентификатор(Строка(УИД)));
	КонецЕсли;
КонецФункции

// Проверяет существование ссылки, возвращает Ложь если не найдена или элемент помечен на удаление
//
// Параметры:
//    ИмяМетаданных - Строка - Имя метаданных ссылки, например "Справочник.ЕАС_ПоляФормШаблонов",
//    Ссылка - Ссылка - произвольная ссылка указанных метаданных.
//
// Возвращаемое значение:
//   Булево - результат
//
Функция СсылкаСуществуетИНеУдалена(ИмяМетаданных, Ссылка) Экспорт
	
	ПривилегированныйРежим = ПривилегированныйРежим();
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СсылочныеМетаданные.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.ЕАС_ПоляФормШаблонов КАК СсылочныеМетаданные
	               |ГДЕ
	               |	СсылочныеМетаданные.Ссылка = &Ссылка
	               |	И НЕ СсылочныеМетаданные.ПометкаУдаления";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Справочник.ЕАС_ПоляФормШаблонов", ИмяМетаданных);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат НЕ Запрос.Выполнить().Пустой();

КонецФункции	

// Формирует строковое значение уникального идентификатора по полученной ссылке
//
// Параметры:
//    Ссылка - Ссылка - Произвольная ссылка
//
// Возвращаемое значение:
//   Строка - результат
//
Функция УИДСтрокойПоСсылке(Ссылка) Экспорт
	
	Возврат XMLСтрока(Ссылка.УникальныйИдентификатор());

КонецФункции

// Формирует имя типа данных XML по типу
//
// Параметры:
//    ТипДанных - Тип - Произвольный тип
//
// Возвращаемое значение:
//   Строка - Представление типа данных XML.
//
Функция ИмяТипаXML(ТипДанных) Экспорт
	ТипДанныхXML = XMLТип(ТипДанных);
	Возврат ТипДанныхXML.ИмяТипа;
КонецФункции

#КонецОбласти

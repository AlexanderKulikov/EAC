#Область ПрограммныйИнтерфейс
// Возвращает версию расширения с которой настроена работа системы.
//
// Возвращаемое значение:
//   Строка - требуемое значение версии.
//
Функция ТребуемаяВерсияРасширения() Экспорт
	Возврат "1.0.0.0";
КонецФункции

// Возвращает результат (тело) выполнения HTTP запроса в виде строки.
//
// Параметры:
// СтруктураЗапроса - Структура - параметры запроса с ключами:
// * ВебАдрес - Строка - Строка адреса ресурса,
// * Запрос - Строка - Строка запроса, например "version",
// * ContentType - Соответствие - описание заголовка запроса,
// * Логин - Строка - Логин пользователя ресурса,
// * Пароль - Строка - Пароль пользователя ресурса,
// * Метод - Строка - Возможные значения "get" и "post",
// * Параметры - Структура - Прочие параметры запроса.
// ТекстОшибки - Строка - Строковая переменная в которую сохраняется описания ошибки выполнения запроса.
//
// Возвращаемое значение:
//   Строка - Тело ответа запроса.
//
Функция HTTPЗапросВыполнить(СтруктураЗапроса, ТекстОшибки = Неопределено) Экспорт
	
	Перем ВебАдрес, ContentType, Логин, Пароль, Метод, СтрокаЗапроса, Параметры, Тело;
	Перем Сервер, Порт, АдресРесурса;
	
	СтруктураЗапроса.Свойство("ВебАдрес",    ВебАдрес);
	СтруктураЗапроса.Свойство("Запрос",      СтрокаЗапроса);
	СтруктураЗапроса.Свойство("ContentType", ContentType);
	СтруктураЗапроса.Свойство("Логин",       Логин);
	СтруктураЗапроса.Свойство("Пароль",      Пароль);
	СтруктураЗапроса.Свойство("Метод",       Метод);
	СтруктураЗапроса.Свойство("Параметры",   Параметры);
	
	ДанныеРесурса = ДанныеРесурса(ВебАдрес, Параметры, СтрокаЗапроса, ТекстОшибки); 
	
	Если ТекстОшибки = Неопределено Тогда
		ДанныеРесурса.Свойство("Сервер",       Сервер);
		ДанныеРесурса.Свойство("Порт",         Порт);
		ДанныеРесурса.Свойство("АдресРесурса", АдресРесурса);
		
		HTTPЗапрос = Новый HTTPЗапрос;
		Если ContentType = Неопределено Или ContentType = "text" Тогда
			HTTPЗапрос.Заголовки.Вставить("Content-Type", "text/html; charset=UTF-8");
		ИначеЕсли ContentType = Неопределено Или ContentType = "xml" Тогда
			HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/xml; charset=UTF-8");
		КонецЕсли;	
		HTTPЗапрос.АдресРесурса = АдресРесурса;
		Если ТипЗнч(Параметры) = Тип("Структура") И Параметры.Свойство("Тело", Тело) И Тело <> Неопределено Тогда
			HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
		КонецЕсли;	
		
		Попытка
			
			ЗащищенноеСоединение = Неопределено;     
			                                  
			HTTPСоединение = Новый HTTPСоединение(Сервер, Порт, Логин, Пароль, , 30, ЗащищенноеСоединение);
			Если Метод = Неопределено Или Метод = "get" Тогда
				HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос);   
			ИначеЕсли Метод = "post" Тогда
				HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);   
			КонецЕсли;
			
			Тело = HTTPОтвет.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
			Если HTTPОтвет.КодСостояния = 200 Тогда
				Возврат Тело;
			ИначеЕсли HTTPОтвет.КодСостояния = 401 Тогда
				ТекстОшибки = СтрШаблон(НСтр("ru = 'Не верны логин/пароль. Ошибка проверки %1. Ответ сервера %2'"), HTTPОтвет.КодСостояния, Тело);
			ИначеЕсли HTTPОтвет.КодСостояния = 404 Тогда
				ТекстОшибки = СтрШаблон(НСтр("ru = 'Адрес не найден. Ошибка проверки %1, Ответ сервера %2'"), HTTPОтвет.КодСостояния, Тело);
			Иначе
				ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка проверки %1, Ответ сервера %2'"), HTTPОтвет.КодСостояния, Тело);
			КонецЕсли;	
		Исключение
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка выполнения %1'"), ОписаниеОшибки());
		КонецПопытки;       
			
	КонецЕсли;	         
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДанныеРесурса(ВебАдрес, Параметры, СтрокаЗапроса = "version", ТекстОшибки = Неопределено)
	
	ТекстОшибки = Неопределено;
	Если Не ЗначениеЗаполнено(ВебАдрес) Тогда
		ТекстОшибки = НСтр("ru = 'Не заполнен веб адрес.'");
	ИначеЕсли Лев(ВРег(ВебАдрес), 4) <> "HTTP" Тогда
		ТекстОшибки = НСтр("ru = 'Строка адреса должна начинаться с ""http""'");
	ИначеЕсли Лев(ВРег(ВебАдрес), 4) <> "HTTP" Тогда
		ТекстОшибки = НСтр("ru = 'Строка адреса должна начинаться с ""http""'");
	КонецЕсли;
	Если ТекстОшибки = Неопределено Тогда        
		ЧастиАдреса = СтрРазделить(ВебАдрес, "/", Ложь);
		Если ЧастиАдреса.Количество() < 2 Тогда
			ТекстОшибки = НСтр("ru = 'Строка адреса должна содержать минимум две части через ""/"". Например http://status.ru'");
		Иначе	
			ДанныеРесурса = Новый Структура;
			
			ЧастиАдреса.Удалить(0);
			ЧастиИмени = СтрРазделить(ЧастиАдреса[0], ":", Ложь);
			Сервер = ЧастиИмени[0];
			ДанныеРесурса.Вставить("Сервер", Сервер);
			
			Порт = ?(ЧастиИмени.Количество() = 2, ЧастиИмени[1], Неопределено);
			ДанныеРесурса.Вставить("Порт", Порт);
			
			ЧастиАдреса.Удалить(0);
			
			// Предопределенные части адреса
			ЧастиАдреса.Добавить("hs");
			ЧастиАдреса.Добавить("pfi");
			
			МассивРесурса = СтрРазделить(СтрокаЗапроса, "/", Ложь);
			Для Каждого ЧастьРесурса Из МассивРесурса Цикл
				ЧастиАдреса.Добавить(ЧастьРесурса);
			КонецЦикла;
			АдресРесурса = СтрСоединить(ЧастиАдреса, "/");
			Если ТипЗнч(Параметры) = Тип("Соответствие")
					И Параметры.Количество() > 0 Тогда
				АдресРесурса = АдресРесурса + "?";
				Для Каждого КлючЗначение Из Параметры Цикл
					АдресРесурса = АдресРесурса + КлючЗначение.Ключ + "=" + КлючЗначение.Значение + "&";
				КонецЦикла;
				АдресРесурса = Лев(АдресРесурса, СтрДлина(АдресРесурса) - 1);
			КонецЕсли;	
			
			ДанныеРесурса.Вставить("АдресРесурса", АдресРесурса);
			Возврат ДанныеРесурса;
		КонецЕсли;
	КонецЕсли;	
	
КонецФункции
	
#КонецОбласти

// Модуль написан с учетом того, что он может исполняться как в конфигурации БСХП
//  так и в ЕАОС
// Все изменения требуется синхронизировать в обоих конфигурациях

#Область ПрограммныйИнтерфейс

// Возвращает структуру с описанием данных для протоколирования обмена
//
// Параметры:
// ВидПротокола - ПеречислениеСсылка.ЕАС_ВидыПротоколовОбмена - вид протокола (измерение регистра сведений ЕАС_ПротоколыОбмена) 
// Протокол     - ТекстовыйДокумент - данные для записи строк протокола
// Возвращаемое значение:
//   Структура - описание данных протокола с ключами:
//	    * ВидПротокола - ПеречислениеСсылка.ЕАС_ВидыПротоколовОбмена - берется из параметра процедуры,
//	    * НачалоОбмена - Дата - Дата и время начала обмена,
//	    * ВремяНачалаОбмена - Универсальная дата в миллисекундах,
//	    * ТекущийУровень - Число - возвращает 1, служит для расчета отступа строки протокола,
//	    * КоличествоОшибок - Число - Количество ошибок обмена,
//	    * ОбластьДанных - область данных в которой происходит обмен,
//	    * Протокол - ТекстовыйДокумент - берется из параметра процедуры.
//
Функция НачатьФормированиеПротокола(ВидПротокола, Протокол) Экспорт
	
	МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
	ЗначениеРазделителяСеанса = МодульРаботаВМоделиСервиса.ЗначениеРазделителяСеанса();
	
	СтруктураПротокол = Новый Структура;
	СтруктураПротокол.Вставить("ВидПротокола",      ВидПротокола);
	СтруктураПротокол.Вставить("НачалоОбмена",      ТекущаяДатаСеанса());
	СтруктураПротокол.Вставить("ВремяНачалаОбмена", ТекущаяУниверсальнаяДатаВМиллисекундах());
	СтруктураПротокол.Вставить("ТекущийУровень",     1);
	СтруктураПротокол.Вставить("КоличествоОшибок",   0);
	СтруктураПротокол.Вставить("ОбластьДанных",      ЗначениеРазделителяСеанса);
	СтруктураПротокол.Вставить("Протокол",          Протокол);
	
	
	Если ЗначениеРазделителяСеанса > 0 Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Начат обмен данными %1. Текущая область -  %2. Текущее время - %3'"),
									СтруктураПротокол.ВидПротокола,
									ЗначениеРазделителяСеанса,
									СтруктураПротокол.НачалоОбмена);
    Иначе
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Начат обмен данными %1. Разделение не установлено. Текущее время - %2'"),
									СтруктураПротокол.ВидПротокола,
									СтруктураПротокол.НачалоОбмена);
	КонецЕсли;								
	СообщениеВПротокол(СтруктураПротокол, ТекстСообщения);							
	
	Возврат СтруктураПротокол;
КонецФункции

// Добавляет текстовую строку в протокол
//
// Параметры:
// СтруктураПротокол - Структура - Описание протокола. См. функцию ЕАС_Протоколирование.НачатьФормированиеПротокола
// ТекстСообщения    - Строка - текстовая строка для добавления в протокол
// ТекущийУровень    - Число - УровеньСтрока (служит для расчета отступа строки протокола). Если Неопределено - тогда берется ТекущийУровень Из параметра СтруктураПротокол
// ЭтоОшибка         - Булево - Признак того что данное сообщение является сообщением об ошибке.
//
Процедура СообщениеВПротокол(СтруктураПротокол, ТекстСообщения, ТекущийУровень = Неопределено, ЭтоОшибка = Ложь) Экспорт
	
	ДлинаТабуляции = 3;
	ПустаяСтрока = "";
	Для Сч = 1 По ДлинаТабуляции Цикл
		ПустаяСтрока = ПустаяСтрока + "                          ";
	КонецЦикла;
	
	Если ТекущийУровень = Неопределено Тогда
		ТекущийУровень = СтруктураПротокол.ТекущийУровень;
	Иначе
		СтруктураПротокол.ТекущийУровень = ТекущийУровень;
	КонецЕсли;	
	Если ЭтоОшибка Тогда
		СтруктураПротокол.КоличествоОшибок = СтруктураПротокол.КоличествоОшибок + 1;
	КонецЕсли;	
	
	Протокол = СтруктураПротокол.Протокол;
	Отступ = Лев(ПустаяСтрока, (ТекущийУровень - 1) * 3); 
	Протокол.ДобавитьСтроку(Отступ + ТекстСообщения);
КонецПроцедуры	

// Заканчивает формирование протокола. Вносит данные в регистр сведений ЕАС_ПротоколыОбмена, и журнал регистрации.
//
// Параметры:
// СтруктураПротокол - Структура - Описание протокола. См. функцию ЕАС_Протоколирование.НачатьФормированиеПротокола
//
Процедура ЗакончитьФормированиеПротокола(СтруктураПротокол) Экспорт
	
	ВремяОкончания = ТекущаяДатаСеанса();
	ТекстСообщения = СтрШаблон(НСтр("ru = 'Закончен обмен данными %1. Текущее время - %2'"),
								СтруктураПротокол.ВидПротокола,
								ВремяОкончания);
	СообщениеВПротокол(СтруктураПротокол, ТекстСообщения, 1);	 	 					
	
	ВремяНачалаОбмена	 	= СтруктураПротокол.ВремяНачалаОбмена;
	ВремяОкончанияОбмена 	= ТекущаяУниверсальнаяДатаВМиллисекундах();
	ДлительностьСекунды     = (ВремяОкончанияОбмена - ВремяНачалаОбмена) / 1000;
		
	ПротоколМенеджер = РегистрыСведений.ЕАС_ПротоколыОбмена.СоздатьМенеджерЗаписи();
	ПротоколМенеджер.Период           = СтруктураПротокол.НачалоОбмена;
	ПротоколМенеджер.ВремяОкончания   = ТекущаяДатаСеанса();
	ПротоколМенеджер.ВидПротокола     = СтруктураПротокол.ВидПротокола;
	ПротоколМенеджер.ОбластьДанных    = СтруктураПротокол.ОбластьДанных;
	ПротоколМенеджер.КоличествоОшибок = СтруктураПротокол.КоличествоОшибок;
	ПротоколМенеджер.Длительность     = ПредставлениеВремени(ДлительностьСекунды);
	ПротоколМенеджер.Протокол         = Новый ХранилищеЗначения(СтруктураПротокол.Протокол, Новый СжатиеДанных(9));
	
	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	ИмяСобытия = СтрШаблон("%1.%2",
							НСтр("ru = 'ЕАОС'", КодОсновногоЯзыка),
							СтруктураПротокол.ВидПротокола);
	Попытка 
		ПротоколМенеджер.Записать();    
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , , СтруктураПротокол.Протокол.ПолучитьТекст());
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		ТекстСообщения = СтрШаблон(НСтр("ru='Ошибка записи протокола обмена в регистр сведений ""Протоколы обмена ЕАОС"" (смотрите журнал регистрации). Текст ошибки: %1'", КодОсновногоЯзыка),
									ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		СообщениеВПротокол(СтруктураПротокол, ТекстСообщения); 
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , СтруктураПротокол.Протокол.ПолучитьТекст());
	КонецПопытки;	
		
КонецПроцедуры

#КонецОбласти                     

#Область СлужебныеПроцедурыИФункции

Функция ПредставлениеВремени(Значение) 
	
	Секунды = Значение;
	
	Часы = Цел(Секунды / 3600);
	Секунды = Секунды - Часы*3600;
	
	Минуты  = Цел(Секунды / 60);
	Секунды = Секунды - Минуты*60;
	
	ПредставлениеВремени = ""
		+ ?(Часы = 0, "", ПредставлениеЧисла(Часы) + " " + НСтр("ru='ч.'") + " ")
		+ ?(Минуты = 0, "", ПредставлениеЧисла(Минуты) + " " + НСтр("ru='мин.'") + " ")
		+ ПредставлениеЧисла(Секунды) + " " + НСтр("ru='сек.'");
	
	Возврат СокрЛП(ПредставлениеВремени);
	
КонецФункции

Функция ПредставлениеЧисла(Значение)
	ФорматЧислаБезПробелов = НСтр("ru = 'ЧН=0; ЧГ=0'");
	Возврат Формат(Значение, ФорматЧислаБезПробелов)
КонецФункции	

#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.РаботаСФайлами
	ГиперссылкаФайлов = РаботаСФайлами.ГиперссылкаФайлов();
	ГиперссылкаФайлов.Размещение = "КоманднаяПанель";
	РаботаСФайлами.ПриСозданииНаСервере(ЭтотОбъект, ГиперссылкаФайлов);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	ПредыдущийШаблон = Объект.Шаблон;
	
	Если Не КомпоновщикИнициализирован Тогда
		ИнициализироватьКомпоновщикНастроек();
	КонецЕсли;	
	
	УстановитьУсловноеОформление();
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПрисоединенныеФайлы.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ЕАС_ИтоговыеОтчетыПрисоединенныеФайлы КАК ПрисоединенныеФайлы
		|ГДЕ
		|	ПрисоединенныеФайлы.Шаблон = &Шаблон";
	
	Запрос.УстановитьПараметр("Шаблон", Объект.Шаблон);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Если РезультатЗапроса.Следующий() Тогда
		ПрисоединенныйФайл = РезультатЗапроса.Ссылка;
		ДанныеФайла = РаботаСФайлами.ДанныеФайла(ПрисоединенныйФайл);
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);	
		
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("mxl");
		ДвоичныеДанные.Записать(ИмяВременногоФайла);
		Результат.Прочитать(ИмяВременногоФайла, СпособЧтенияЗначенийТабличногоДокумента.Значение);
		УдалитьФайлы(ИмяВременногоФайла);
	Иначе	
		ПрисоединенныйФайл = Неопределено;
		Результат = Неопределено;
	КонецЕсли;
	
	
	НастройкиОтбора = ТекущийОбъект.НастройкиОтбора.Получить();
	Если ТипЗнч(НастройкиОтбора) = Тип("ОтборКомпоновкиДанных") Тогда
		ИнициализироватьКомпоновщикНастроек();
		КомпоновкаДанныхКлиентСервер.СкопироватьЭлементы(КомпоновщикНастроек.Настройки.Отбор, НастройкиОтбора, Истина);
	КонецЕсли;	               
	
	УстановитьДопРеквизитыТабличнойЧасти();
	
КонецПроцедуры                                  

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Перем НастройкиОтбора;
	Если КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество() > 0 Тогда
		ТекущийОбъект.НастройкиОтбора = Новый ХранилищеЗначения(КомпоновщикНастроек.Настройки.Отбор, Новый СжатиеДанных(9));
		ТекущийОбъект.ПредставлениеОтбора = Строка(КомпоновщикНастроек.Настройки.Отбор);	
	Иначе	
		ТекущийОбъект.НастройкиОтбора = Неопределено;
		ТекущийОбъект.ПредставлениеОтбора = "";	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Перем НастройкиОтбора;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("mxl");
	Результат.Записать(ИмяВременногоФайла, ТипФайлаТабличногоДокумента.MXL);
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяВременногоФайла);
	УдалитьФайлы(ИмяВременногоФайла);
	
	АдресРезультата = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	
	Если ЗначениеЗаполнено(ПрисоединенныйФайл) Тогда        
		ИнформацияОФайле = Новый Структура;
		ИнформацияОФайле.Вставить("АдресФайлаВоВременномХранилище", АдресРезультата);
		ИнформацияОФайле.Вставить("АдресВременногоХранилищаТекста", Неопределено);
		ИнформацияОФайле.Вставить("ИмяБезРасширения",               "Результат");
		ИнформацияОФайле.Вставить("Расширение",                     "mxl");
		ИнформацияОФайле.Вставить("Шаблон",                         ТекущийОбъект.Шаблон);
		ИнформацияОФайле.Вставить("ВремяИзмененияУниверсальное", УниверсальноеВремя(ТекущаяДатаСеанса()));
		РаботаСФайлами.ОбновитьФайл(ПрисоединенныйФайл, ИнформацияОФайле);
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.ЕАС_ИтоговыеОтчетыПрисоединенныеФайлы");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ПрисоединенныйФайл);
		НачатьТранзакцию();
		Попытка
			Блокировка.Заблокировать();
			ПрисоединенныйФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
			ПрисоединенныйФайлОбъект.Шаблон = Объект.Шаблон;
			ПрисоединенныйФайлОбъект.Записать();
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение ОписаниеОшибки();
		КонецПопытки;
	Иначе	
		ПараметрыФайла = Новый Структура;   
		ПараметрыФайла.Вставить("Автор",              Пользователи.ТекущийПользователь());
		ПараметрыФайла.Вставить("ВладелецФайлов",     ТекущийОбъект.Ссылка);
		ПараметрыФайла.Вставить("ИмяБезРасширения",   "Результат");
		ПараметрыФайла.Вставить("РасширениеБезТочки", "mxl");
		ПараметрыФайла.Вставить("Служебный",          Истина);
		ПараметрыФайла.Вставить("Шаблон",             Объект.Шаблон);
		ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", УниверсальноеВремя(ТекущаяДатаСеанса()));
		ПрисоединенныйФайл = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресРезультата);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
    // СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьДопРеквизитыТабличнойЧасти();       
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		УдалитьИзВременногоХранилища(АдресРезультата);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	ПараметрыФормы = Новый Структура("НачалоПериода, КонецПериода", Объект.ДатаНачала, Объект.ДатаОкончания);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", ПараметрыФормы, Элементы.ВыбратьПериод, , , , ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ШаблонПриИзменении(Элемент)
	Если Объект.Шаблон <> ПредыдущийШаблон Тогда
		ПрочитатьШаблонОтчета(Объект.Шаблон, Истина);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыОтчетаЗначениеПриИзменении(Элемент)
	ТекущиеДанные = Элементы.РассчитанныеПоказатели.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.ПолеФормы) Тогда
		
		Если ТекущиеДанные.ВозможнаРучнаяКорректировка Тогда
			ИмяПоля = ЕАС_ОбработкаШаблоновКлиентСерверКопируемый.ИмяЯчейкиПоСсылке(ТекущиеДанные.ПолеФормы);
			Область = Результат.Области.Найти(ИмяПоля);
			Если Область <> Неопределено Тогда
				Область.Значение = ТекущиеДанные.Значение;
				ТекущиеДанные.УстановленоВручную = Истина;
			КонецЕсли;
		Иначе
			ПоказатьПредупреждение(, НСтр("ru='Корректировка значения запрещена. Изменение не будет отражено в документе.'"));
		КонецЕсли;
		
	КонецЕсли;	
КонецПроцедуры

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраНажатие(Элемент, СтандартнаяОбработка)
    РаботаСФайламиКлиент.ПолеПредпросмотраНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
    РаботаСФайламиКлиент.ПолеПредпросмотраПеретаскивание(ЭтотОбъект, Элемент,
                ПараметрыПеретаскивания, СтандартнаяОбработка);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
    РаботаСФайламиКлиент.ПолеПредпросмотраПроверкаПеретаскивания(ЭтотОбъект, Элемент,
                ПараметрыПеретаскивания, СтандартнаяОбработка);
КонецПроцедуры

// Конец СтандартныеПодсистемы.РаботаСФайлами
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРезультат

&НаКлиенте
Процедура РезультатПриАктивизации(Элемент)
	
	ТекущаяОбласть = Элемент.ТекущаяОбласть;
	Элемент.Редактирование = Ложь;
	
	ОписаниеПоля = ОписаниеПоляШаблона(АдресРезультата, ТекущаяОбласть.Имя);
	Если ТипЗнч(ОписаниеПоля) = Тип("Структура") Тогда
		Если ОписаниеПоля.РучнаяКорректировка Тогда
			Элемент.Редактирование = Истина;
			ТекущаяОбласть.СодержитЗначение = Истина;
			ТекущаяОбласть.ТипЗначения = Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15, ОписаниеПоля.ТочностьЧисла));
			ТекущаяОбласть.Формат = "ЧДЦ=" + ОписаниеПоля.ТочностьЧисла;
		КонецЕсли;				
	КонецЕсли;                  
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	ОписаниеПоля = ОписаниеПоляШаблона(АдресРезультата, Область.Имя);
	Если ТипЗнч(ОписаниеПоля) = Тип("Структура") Тогда
		ЕАС_ОбработкаШаблоновКлиентСерверКопируемый.УстановитьПоказатель(Объект.РассчитанныеПоказатели, ОписаниеПоля, Область.Значение, Истина);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Заполнить(Команда)
	
	Если ЗначениеЗаполнено(Объект.Шаблон) Тогда
		ЗаполнитьНаСервере();             
	Иначе
		ПоказатьПредупреждение(,НСтр("ru='Выберите шаблон для заполнения'"));
	КонецЕсли;	
		
КонецПроцедуры

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_КомандаПанелиПрисоединенныхФайлов(Команда)
    РаботаСФайламиКлиент.КомандаУправленияПрисоединеннымиФайлами(ЭтотОбъект, Команда);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

&НаКлиенте
Процедура Очистить(Команда)
	
	ПрочитатьШаблонОтчета(Объект.Шаблон, Истина);
	
КонецПроцедуры

&НаСервере
Процедура РасшифроватьНаСервере()
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура Расшифровать(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Шаблон) Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Для расшифровки требуется выбрать шаблон'"));
		Возврат;                                     
	КонецЕсли;	
	
	ВыделенныеОбласти = Результат.ВыделенныеОбласти;   
	Если ВыделенныеОбласти.Количество() = 1 Тогда           
		ВыделеннаяОбласть = ВыделенныеОбласти[0];
		Ячейка = Результат.Область(ВыделеннаяОбласть.Верх, ВыделеннаяОбласть.Лево);
		
		ПараметрыОткрытияФормы = Новый Структура;                        
		ПараметрыОткрытияФормы.Вставить("Шаблон",Объект.Шаблон);
		ПараметрыОткрытияФормы.Вставить("Верх",  Ячейка.Верх);
		ПараметрыОткрытияФормы.Вставить("Лево",  Ячейка.Лево);
		
		ПолеФормы = ЕАС_ОбработкаШаблоновКлиентСерверКопируемый.СсылкаЯчейкиШаблона(Ячейка.Имя);
		Если ЗначениеЗаполнено(ПолеФормы) Тогда
			ПараметрыОткрытияФормы.Вставить("ПолеФормы", ПолеФормы);       
			СтрокиРасшифровки = Объект.РассчитанныеПоказатели.НайтиСтроки(Новый Структура("ПолеФормы", ПолеФормы));
			Если СтрокиРасшифровки.Количество() = 0 Тогда
				ТекстСообщения = НСтр("ru = 'Составляющих значений не найдено.'");
				ПоказатьПредупреждение(, ТекстСообщения);
				Возврат;
			КонецЕсли;	
			Расшифровка = Новый СписокЗначений;
			Для Каждого СтрокаРасшифровки Из СтрокиРасшифровки Цикл
				СтруктураРасшифровки = Новый Структура;
				СтруктураРасшифровки.Вставить("Организация",        СтрокаРасшифровки.Организация);
				СтруктураРасшифровки.Вставить("Значение",           СтрокаРасшифровки.Значение);
				СтруктураРасшифровки.Вставить("УстановленоВручную", СтрокаРасшифровки.УстановленоВручную);
				Расшифровка.Добавить(СтруктураРасшифровки);
			КонецЦикла;	
			ПараметрыОткрытияФормы.Вставить("Расшифровка", Расшифровка);       
		Иначе
			ТекстСообщения = НСтр("ru = 'Расшифровка ячейки не предусмотрена.'");
			ПоказатьПредупреждение(, ТекстСообщения);
			Возврат;
		КонецЕсли;         
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("Ячейка", Ячейка);
		ОткрытьФорму("Документ.ЕАС_ИтоговыеОтчеты.Форма.ФормаРасшифровки", ПараметрыОткрытияФормы, ЭтаФорма, ПолеФормы, , , , РежимОткрытияОкнаФормы.Независимый);	
	КонецЕсли;	
	
	РасшифроватьНаСервере();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции               

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Объект.ДатаНачала    = РезультатВыбора.НачалоПериода;
	Объект.ДатаОкончания = РезультатВыбора.КонецПериода;
	
	ПриИзмененииПериода();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
 
	УсловноеОформление.Элементы.Очистить();
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();     
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РассчитанныеПоказатели.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РассчитанныеПоказатели.ВозможнаРучнаяКорректировка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.ТемноСиний);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьКомпоновщикНастроек() 
	
	СхемаКомпоновки = СхемаКомпоновкиДляОрганизаций();
	
	ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(ПоместитьВоВременноеХранилище(СхемаКомпоновки, УникальныйИдентификатор));
	КомпоновщикНастроек.Инициализировать(ИсточникДоступныхНастроек);
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновки.НастройкиПоУмолчанию);

	КомпоновщикИнициализирован = Истина;

КонецПроцедуры	

&НаСервере
Функция СхемаКомпоновкиДляОрганизаций()	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	Организации.Ссылка КАК Ссылка,
	               |	Организации.Код КАК Код,
	               |	Организации.Наименование КАК Наименование,
	               |	Организации.КПП КАК КПП,
	               |	Организации.ИНН КАК ИНН,
	               |	Организации.НаименованиеПолное КАК НаименованиеПолное,
	               |	Организации.НаименованиеСокращенное КАК НаименованиеСокращенное
	               |ИЗ
	               |	Справочник.Организации КАК Организации
	               |ГДЕ
	               |	НЕ Организации.ПометкаУдаления";
	
	СхемаКомпоновки = Новый СхемаКомпоновкиДанных;
	ИсточникДанных = СхемаКомпоновки.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = "ИсточникДанных";
	ИсточникДанных.СтрокаСоединения = "";
	ИсточникДанных.ТипИсточникаДанных = "Local";
	
	НаборДанных = СхемаКомпоновки.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Имя = "НаборДанных";
	НаборДанных.ИсточникДанных = ИсточникДанных.Имя;
	НаборДанных.Запрос = ТекстЗапроса;
	НаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;
	
	ОсновнойВариантНастроек = СхемаКомпоновки.ВариантыНастроек.Найти("Основной");
	ОсновнаяНастройка = ОсновнойВариантНастроек.Настройки;
	
	ВыбранноеПоле = ОсновнаяНастройка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Использование = Истина;
	ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных("Ссылка");
	
	ГруппировкаКомпоновки = ОсновнаяНастройка.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ГруппировкаКомпоновки.Использование = Истина;			
	АвтоПоле = ГруппировкаКомпоновки.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	АвтоПоле.Использование = Истина;	
	
	Возврат СхемаКомпоновки;
КонецФункции
	
&НаСервере
Функция ОрганизацииОтбора()
	
	СхемаКомпоновки = СхемаКомпоновкиДляОрганизаций();
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновки, КомпоновщикНастроек.Настройки, ДанныеРасшифровки,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
 	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,,ДанныеРасшифровки);	
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ТаблицаОрганизаций = Новый ТаблицаЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаОрганизаций);
    ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);

	Возврат ТаблицаОрганизаций.ВыгрузитьКолонку("Ссылка");
	
КонецФункции

&НаКлиенте
Процедура ПриИзмененииПериода()
КонецПроцедуры

&НаСервере
Процедура УстановитьДопРеквизитыТабличнойЧасти()
	
	МассивПолей = Новый Массив;
	СоответствиеПолей = Новый Соответствие;
	Для Каждого СтрокаПоказателя Из Объект.РассчитанныеПоказатели Цикл
		МассивПолей.Добавить(СтрокаПоказателя.ПолеФормы);
		СоответствиеПолей.Вставить(СтрокаПоказателя.ПолеФормы, СтрокаПоказателя); 
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоляФормШаблонов.Ссылка КАК Ссылка,
		|	ПоляФормШаблонов.РучнаяКорректировка КАК ВозможнаРучнаяКорректировка
		|ИЗ
		|	Справочник.ЕАС_ПоляФормШаблонов КАК ПоляФормШаблонов
		|ГДЕ
		|	ПоляФормШаблонов.Ссылка В(&ПоляФорм)";
	
	Запрос.УстановитьПараметр("ПоляФорм", МассивПолей);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока РезультатЗапроса.Следующий() Цикл
		СтрокаПоказателя = СоответствиеПолей.Получить(РезультатЗапроса.Ссылка);
		СтрокаПоказателя.ВозможнаРучнаяКорректировка = РезультатЗапроса.ВозможнаРучнаяКорректировка;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОписаниеПоляШаблона(АдресПолейШаблона, ИмяЯчейки)
	Если ЭтоАдресВременногоХранилища(АдресПолейШаблона) Тогда
		ТаблицаПолейШаблона = ПолучитьИзВременногоХранилища(АдресПолейШаблона);
	КонецЕсли;
	
	Если ТипЗнч(ТаблицаПолейШаблона) = Тип("ТаблицаЗначений") Тогда
		ПараметрыОтбора = Новый Структура("ИмяЯчейки", ИмяЯчейки);
		СтрокиТаблицыПолей = ТаблицаПолейШаблона.НайтиСтроки(ПараметрыОтбора);
		Если СтрокиТаблицыПолей.Количество() > 0 Тогда
			ОписаниеПолей = Новый Структура();
			СтрокаТаблицыПолей = СтрокиТаблицыПолей[0];
			Для Каждого Колонка Из ТаблицаПолейШаблона.Колонки Цикл
				ОписаниеПолей.Вставить(Колонка.Имя, СтрокаТаблицыПолей[Колонка.Имя]);
			КонецЦикла;
			Возврат ОписаниеПолей;
		КонецЕсли;	
	КонецЕсли;
КонецФункции

&НаСервере
Процедура ПрочитатьШаблонОтчета(Шаблон, ОбновитьТабличныйДокумент = Истина)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
		
	АдресРезультата = "";
	Если ЗначениеЗаполнено(Шаблон) Тогда
		ХранилищеДанных = ЕАС_ОбщегоНазначенияКопируемый.ПолучитьПрисоединенныеДанные(Шаблон, Перечисления.ЕАС_ВидыПрисоединенныхДанных.ТабличныйДокумент);
		Если ЗначениеЗаполнено(ХранилищеДанных) Тогда 
			ТабличныйДокумент = ХранилищеДанных.Получить();
			
			ТаблицаПолейШаблона = ЕАС_ОбработкаШаблоновКопируемый.ТаблицаПолейШаблона(ТабличныйДокумент, Шаблон, Неопределено);
			Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
				УдалитьИзВременногоХранилища(АдресРезультата);
			КонецЕсли;	
			АдресРезультата = ПоместитьВоВременноеХранилище(ТаблицаПолейШаблона, Новый УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
	Если ОбновитьТабличныйДокумент Тогда
		Результат = ТабличныйДокумент;
		Объект.РассчитанныеПоказатели.Очистить();
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере()          
	
	ХранилищеДанных = ЕАС_ОбщегоНазначенияКопируемый.ПолучитьПрисоединенныеДанные(Объект.Шаблон, Перечисления.ЕАС_ВидыПрисоединенныхДанных.ТабличныйДокумент);
	
	Если ЗначениеЗаполнено(ХранилищеДанных) Тогда 
		ТабличныйДокумент = ХранилищеДанных.Получить();
	Иначе
		ТабличныйДокумент = Новый ТабличныйДокумент;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	РассчитанныеПоказатели.ПолеФормы КАК ПолеФормы,
	               |	РассчитанныеПоказатели.Значение КАК Значение,
	               |	РассчитанныеПоказатели.УстановленоВручную КАК УстановленоВручную,
	               |	РассчитанныеПоказатели.Ссылка.Организация КАК Организация,
	               |	РассчитанныеПоказатели.Ссылка.Дата КАК ДатаРасчета
	               |ИЗ
	               |	Документ.ЕАС_ОтчетыИнтеграции.РассчитанныеПоказатели КАК РассчитанныеПоказатели
	               |ГДЕ
	               |	РассчитанныеПоказатели.Ссылка.Проведен
	               |	И РассчитанныеПоказатели.Ссылка.Шаблон = &Шаблон
	               |	И РассчитанныеПоказатели.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	               |	И РассчитанныеПоказатели.Ссылка.Организация В(&Организации)";
	
	Запрос.УстановитьПараметр("Шаблон",        Объект.Шаблон);
	Запрос.УстановитьПараметр("ДатаНачала",    НачалоДня(Объект.ДатаНачала));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(Объект.ДатаОкончания));
	Запрос.УстановитьПараметр("Организации",   ОрганизацииОтбора());
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Объект.РассчитанныеПоказатели.Очистить();
	Пока РезультатЗапроса.Следующий() Цикл   
		СтрокаРасчета = Объект.РассчитанныеПоказатели.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРасчета, РезультатЗапроса);
	КонецЦикла;
	
	
	СтруктураЗаполнения = Новый Структура;
	СтруктураЗаполнения.Вставить("Ответственный", Объект.Ответственный);
	СтруктураЗаполнения.Вставить("Комментарий",   Объект.Комментарий);
	//
	ОписанияОбластейСсылок = Новый Соответствие;
	
	ВыборкаПолейШаблона = ЕАС_ОбработкаШаблоновКопируемый.ВыборкаПолейШаблона(ТабличныйДокумент, Объект.Шаблон, ОписанияОбластейСсылок);
	Пока ВыборкаПолейШаблона.Следующий() Цикл
		ОписаниеОбласти = ОписанияОбластейСсылок.Получить(ВыборкаПолейШаблона.Ссылка);
		Если ОписаниеОбласти <> Неопределено Тогда
			ОбластьЯчейка = ОписаниеОбласти.Область;
			
			ИмяПараметра  = ОписаниеОбласти.ИмяПараметра;
			
			Если ИмяПараметра <> Неопределено Тогда          
				ПараметрыОтбора = Новый Структура("ПолеФормы", ВыборкаПолейШаблона.Ссылка);
				РассчитанныеСтроки = Объект.РассчитанныеПоказатели.НайтиСтроки(ПараметрыОтбора);   
				ЗначениеПоказателя = 0;
				Для Каждого СтрокаРасчета Из РассчитанныеСтроки Цикл
					ЗначениеПоказателя = ЗначениеПоказателя + СтрокаРасчета.Значение;
				КонецЦикла;
				ОбластьЯчейка.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр;
				ОбластьЯчейка.Параметр   = ИмяПараметра;
				ОбластьЯчейка.Формат     = "ЧН=;ЧДЦ=" + ВыборкаПолейШаблона.ТочностьЧисла;
				СтруктураЗаполнения.Вставить(ИмяПараметра, ЗначениеПоказателя); 
			КонецЕсли;	                
		КонецЕсли;	     
	КонецЦикла;	
	
	ТабличныйДокумент.Параметры.Заполнить(СтруктураЗаполнения);
	//
	Результат = Новый ТабличныйДокумент;
	Результат.Вывести(ТабличныйДокумент);
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеПроцедурыИФункции               

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
